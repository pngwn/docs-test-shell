export const docs = [
	{
		content:
			'<p>This page contains detailed API reference documentation. It&#39;s intended to be a resource for people who already have some familiarity with Svelte.</p>\n<p>If that&#39;s not you (yet), you may prefer to visit the <a href="tutorial" rel="noopener noreferrer">interactive tutorial</a> or the <a href="examples" rel="noopener noreferrer">examples</a> before consulting this reference.</p>\n<p>Don&#39;t be shy about asking for help in the <a href="chat" rel="noopener noreferrer">Discord chatroom</a>.</p>\n<p>Using an older version of Svelte? Have a look at the <a href="https://v2.svelte.dev" target="_blank" rel="noopener noreferrer">v2 docs</a>.</p>\n',
		title: "Before we begin",
		slug: "Before_we_begin",
		file: "00-introduction.md",
		sections: [],
	},
	{
		content:
			'<div class="side-by-side"><div class="copy"><p>Components are the building blocks of Svelte applications. They are written into <code>.svelte</code> files, using a superset of HTML.</p>\n<p>All three sections — script, styles and markup — are optional.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token comment">// logic goes here</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n\t<span class="token comment">/* styles go here */</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- markup (zero or more items) goes here --></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="script" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#script" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t&lt;script&gt;\n\t\t\t\t\t</h3><p>A <code>&lt;script&gt;</code> block contains JavaScript that runs when a component instance is created. Variables declared (or imported) at the top level are &#39;visible&#39; from the component&#39;s markup. There are four additional rules:</p>\n\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="1_export_creates_a_component_prop" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#1_export_creates_a_component_prop" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t1. <code>export</code> creates a component prop\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Svelte uses the <code>export</code> keyword to mark a variable declaration as a <em>property</em> or <em>prop</em>, which means it becomes accessible to consumers of the component (see the section on <a href="docs#Attributes_and_props" rel="noopener noreferrer">attributes and props</a> for more information).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> foo<span class="token punctuation">;</span>\n\n\t<span class="token comment">// Values that are passed in as props</span>\n\t<span class="token comment">// are immediately available</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>You can specify a default initial value for a prop. It will be used if the component&#39;s consumer doesn&#39;t specify the prop on the component (or if its initial value is <code>undefined</code>) when instantiating the component. Note that whenever a prop is removed by the consumer, its value is set to <code>undefined</code> rather than the initial value.</p>\n<p>In development mode (see the <a href="docs#svelte_compile" rel="noopener noreferrer">compiler options</a>), a warning will be printed if no default initial value is provided and the consumer does not specify a value. To squelch this warning, ensure that a default initial value is specified, even if it is <code>undefined</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">\'optional default initial value\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> baz <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If you export a <code>const</code>, <code>class</code> or <code>function</code>, it is readonly from outside the component. Function <em>expressions</em> are valid props, however.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token comment">// these are readonly</span>\n\t<span class="token keyword">export</span> <span class="token keyword">const</span> thisIs <span class="token operator">=</span> <span class="token string">\'readonly\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// this is a prop</span>\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=></span> n<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>You can use reserved words as prop names.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">let</span> className<span class="token punctuation">;</span>\n\n\t<span class="token comment">// creates a `class` property, even</span>\n\t<span class="token comment">// though it is a reserved word</span>\n\t<span class="token keyword">export</span> <span class="token punctuation">{</span> className <span class="token keyword">as</span> <span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="2_Assignments_are_reactive" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#2_Assignments_are_reactive" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t2. Assignments are &#39;reactive&#39;\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>To change component state and trigger a re-render, just assign to a locally declared variable.</p>\n<p>Update expressions (<code>count += 1</code>) and property assignments (<code>obj.x = y</code>) have the same effect.</p>\n<p>Because Svelte&#39;s reactivity is based on assignments, using array methods like <code>.push()</code> and <code>.splice()</code> won&#39;t automatically trigger updates. Options for getting around this can be found in the <a href="tutorial/updating-arrays-and-objects" rel="noopener noreferrer">tutorial</a>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">handleClick</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// calling this function will trigger an</span>\n\t\t<span class="token comment">// update if the markup references `count`</span>\n\t\tcount <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="3_$_marks_a_statement_as_reactive" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#3_$_marks_a_statement_as_reactive" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t3. <code>$:</code> marks a statement as reactive\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Any top-level statement (i.e. not inside a block or a function) can be made reactive by prefixing it with the <code>$:</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label" target="_blank" rel="noopener noreferrer">JS label syntax</a>. Reactive statements run immediately before the component updates, whenever the values that they depend on have changed.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> title<span class="token punctuation">;</span>\n\n\t<span class="token comment">// this will update `document.title` whenever</span>\n\t<span class="token comment">// the `title` prop changes</span>\n\t$<span class="token operator">:</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>\n\n\t$<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">multiple statements can be combined</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">the current title is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If a statement consists entirely of an assignment to an undeclared variable, Svelte will inject a <code>let</code> declaration on your behalf.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> num<span class="token punctuation">;</span>\n\n\t<span class="token comment">// we don\'t need to declare `squared` and `cubed`</span>\n\t<span class="token comment">// — Svelte does it for us</span>\n\t$<span class="token operator">:</span> squared <span class="token operator">=</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span>\n\t$<span class="token operator">:</span> cubed <span class="token operator">=</span> squared <span class="token operator">*</span> num<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="4_Prefix_stores_with_$_to_access_their_values" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#4_Prefix_stores_with_$_to_access_their_values" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t4. Prefix stores with <code>$</code> to access their values\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>A <em>store</em> is an object that allows reactive access to a value via a simple <em>store contract</em>. The <a href="docs#svelte_store" rel="noopener noreferrer"><code>svelte/store</code> module</a> contains minimal store implementations which fulfil this contract.</p>\n<p>Any time you have a reference to a store, you can access its value inside a component by prefixing it with the <code>$</code> character. This causes Svelte to declare the prefixed variable, and set up a store subscription that will be unsubscribed when appropriate.</p>\n<p>Assignments to <code>$</code>-prefixed variables require that the variable be a writable store, and will result in a call to the store&#39;s <code>.set</code> method.</p>\n<p>Note that the store must be declared at the top level of the component — not inside an <code>if</code> block or a function, for example.</p>\n<p>Local variables (that do not represent store values) must <em>not</em> have a <code>$</code> prefix.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> writable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/store\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs 0</span>\n\n\tcount<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs 1</span>\n\n\t$count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs 2</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Store_contract" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Store_contract" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tStore contract\n\t\t\t\t\t</h5><div class=\'code-block\'><pre class=\'language-javascript\'><code>store <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function-variable function">subscribe</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function-variable function">subscription</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> set<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">}</span></code></pre></div><p>You can create your own stores without relying on <a href="docs#svelte_store" rel="noopener noreferrer"><code>svelte/store</code></a>, by implementing the <em>store contract</em>:</p>\n<ol>\n<li>A store must contain a <code>.subscribe</code> method, which must accept as its argument a subscription function. This subscription function must be immediately and synchronously called with the store&#39;s current value upon calling <code>.subscribe</code>. All of a store&#39;s active subscription functions must later be synchronously called whenever the store&#39;s value changes.</li>\n<li>The <code>.subscribe</code> method must return an unsubscribe function. Calling an unsubscribe function must stop its subscription, and its corresponding subscription function must not be called again by the store.</li>\n<li>A store may <em>optionally</em> contain a <code>.set</code> method, which must accept as its argument a new value for the store, and which synchronously calls all of the store&#39;s active subscription functions. Such a store is called a <em>writable store</em>.</li>\n</ol>\n<p>For interoperability with RxJS Observables, the <code>.subscribe</code> method is also allowed to return an object with an <code>.unsubscribe</code> method, rather than return the unsubscription function directly. Note however that unless <code>.subscribe</code> synchronously calls the subscription (which is not required by the Observable spec), Svelte will see the value of the store as <code>undefined</code> until it does.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="script_context_module" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#script_context_module" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t&lt;script context=&quot;module&quot;&gt;\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>A <code>&lt;script&gt;</code> tag with a <code>context=&quot;module&quot;</code> attribute runs once when the module first evaluates, rather than for each component instance. Values declared in this block are accessible from a regular <code>&lt;script&gt;</code> (and the component markup) but not vice versa.</p>\n<p>You can <code>export</code> bindings from this block, and they will become exports of the compiled module.</p>\n<p>You cannot <code>export default</code>, since the default export is the component itself.</p>\n<blockquote>\n<p>Variables defined in <code>module</code> scripts are not reactive — reassigning them will not trigger a rerender even though the variable itself will update. For values shared between multiple components, consider using a <a href="docs#svelte_store" rel="noopener noreferrer">store</a>.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">let</span> totalComponents <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// this allows an importer to do e.g.</span>\n\t<span class="token comment">// `import Example, { alertTotal } from \'./Example.svelte\'`</span>\n\t<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">alertTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">alert</span><span class="token punctuation">(</span>totalComponents<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\ttotalComponents <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">total number of times this component has been created: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>totalComponents<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="style" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#style" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t&lt;style&gt;\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>CSS inside a <code>&lt;style&gt;</code> block will be scoped to that component.</p>\n<p>This works by adding a class to affected elements, which is based on a hash of the component styles (e.g. <code>svelte-123xyz</code>).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n\t<span class="token selector">p</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/* this will only affect &lt;p> elements in this component */</span>\n\t\t<span class="token property">color</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>To apply styles to a selector globally, use the <code>:global(...)</code> modifier.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n\t<span class="token selector">:global(body)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/* this will apply to &lt;body> */</span>\n\t\t<span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token selector">div :global(strong)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">/* this will apply to all &lt;strong> elements, in any\n\t\t\t component, that are inside &lt;div> elements belonging\n\t\t\t to this component */</span>\n\t\t<span class="token property">color</span><span class="token punctuation">:</span> goldenrod<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If you want to make @keyframes that are accessible globally, you need to prepend your keyframe names with <code>-global-</code>.</p>\n<p>The <code>-global-</code> part will be removed when compiled, and the keyframe then be referenced using just <code>my-animation-name</code> elsewhere in your code.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-markup\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n\t<span class="token atrule"><span class="token rule">@keyframes</span> -global-my-animation-name</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></div></div></div>',
		title: "Component format",
		slug: "Component_format",
		file: "01-component-format.md",
		sections: [
			{
				slug: "script",
				title: "&lt;script&gt;",
				sections: [],
			},
			{
				slug: "script_context_module",
				title: "&lt;script context=&quot;module&quot;&gt;",
				sections: [],
			},
			{
				slug: "style",
				title: "&lt;style&gt;",
				sections: [],
			},
		],
	},
	{
		content:
			'\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Tags" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Tags" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tTags\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>A lowercase tag, like <code>&lt;div&gt;</code>, denotes a regular HTML element. A capitalised tag, such as <code>&lt;Widget&gt;</code> or <code>&lt;Namespace.Widget&gt;</code>, indicates a <em>component</em>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> Widget <span class="token keyword">from</span> <span class="token string">\'./Widget.svelte\'</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span><span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Attributes_and_props" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Attributes_and_props" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tAttributes and props\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>By default, attributes work exactly like their HTML counterparts.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>can\'t touch this<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>As in HTML, values may be unquoted.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>checkbox</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Attribute values can contain JavaScript expressions.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href="page</span>/<span class="token language-javascript"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>page <span class="token language-javascript"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Or they can <em>be</em> JavaScript expressions.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">!</span>clickable<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Boolean attributes are included on the element if their value is <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy" target="_blank" rel="noopener noreferrer">truthy</a> and excluded if it&#39;s <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" target="_blank" rel="noopener noreferrer">falsy</a>.</p>\n<p>All other attributes are included unless their value is <a href="https://developer.mozilla.org/en-US/docs/Glossary/Nullish" target="_blank" rel="noopener noreferrer">nullish</a> (<code>null</code> or <code>undefined</code>).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-markup\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{false}</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>This input field is not required<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{null}</span><span class="token punctuation">></span></span>This div has no title attribute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>An expression might include characters that would cause syntax highlighting to fail in regular HTML, so quoting the value is permitted. The quotes do not affect how the value is parsed:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled="</span><span class="token language-javascript"><span class="token punctuation">{</span>number <span class="token operator">!==</span> <span class="token number">42</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>When the attribute name and value match (<code>name={name}</code>), they can be replaced with <code>{name}</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- These are equivalent --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled=</span><span class="token language-javascript"><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token language-javascript"><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>By convention, values passed to components are referred to as <em>properties</em> or <em>props</em> rather than <em>attributes</em>, which are a feature of the DOM.</p>\n<p>As with elements, <code>name={name}</code> can be replaced with the <code>{name}</code> shorthand.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span> <span class="token attr-name">foo=</span><span class="token language-javascript"><span class="token punctuation">{</span>bar<span class="token punctuation">}</span></span> <span class="token attr-name">answer=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token number">42</span><span class="token punctuation">}</span></span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p><em>Spread attributes</em> allow many attributes or properties to be passed to an element or component at once.</p>\n<p>An element or component can have multiple spread attributes, interspersed with regular ones.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span> <span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">...</span>things<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p><em><code>$$props</code></em> references all props that are passed to a component, including ones that are not declared with <code>export</code>. It is not generally recommended, as it is difficult for Svelte to optimise. But it can be useful in rare cases – for example, when you don&#39;t know at compile time what props might be passed to a component.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span> <span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">...</span>$$props<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p><em><code>$$restProps</code></em> contains only the props which are <em>not</em> declared with <code>export</code>. It can be used to pass down other unknown attributes to an element in a component. It shares the same optimisation problems as <em><code>$$props</code></em>, and is likewise not recommended.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-markup\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">{...$$restProps}</span><span class="token punctuation">></span></span></code></pre></div></div></div><blockquote>\n<p>The <code>value</code> attribute of an <code>input</code> element or its children <code>option</code> elements must not be set with spread attributes when using <code>bind:group</code> or <code>bind:checked</code>. Svelte needs to be able to see the element&#39;s <code>value</code> directly in the markup in these cases so that it can link it to the bound variable.</p>\n</blockquote>\n<div class="side-by-side"><div class="copy">\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Text_expressions" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Text_expressions" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tText expressions\n\t\t\t\t\t</h3></div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>expression<span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Text can also contain JavaScript expressions:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span> + <span class="token language-javascript"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span> = <span class="token language-javascript"><span class="token punctuation">{</span>a <span class="token operator">+</span> b<span class="token punctuation">}</span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Comments" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Comments" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tComments\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>You can use HTML comments inside components.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- this is a comment! --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Comments beginning with <code>svelte-ignore</code> disable warnings for the next block of markup. Usually these are accessibility warnings; make sure that you&#39;re disabling them for a good reason.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- svelte-ignore a11y-autofocus --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span> <span class="token attr-name">autofocus</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="if" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#if" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{#if ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Content that is conditionally rendered can be wrapped in an if block.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> answer <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>what was the question?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Additional conditions can be added with <code>{:else if expression}</code>, optionally ending in an <code>{:else}</code> clause.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> porridge<span class="token punctuation">.</span>temperature <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>too hot!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token number">80</span> <span class="token operator">></span> porridge<span class="token punctuation">.</span>temperature<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>too cold!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>just right!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="each" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#each" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{#each ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">expression </span><span class="token keyword">as</span> <span class="token language-javascript">name<span class="token punctuation">}</span></span></span>...<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">expression </span><span class="token keyword">as</span> <span class="token language-javascript">name<span class="token punctuation">,</span> index<span class="token punctuation">}</span></span></span>...<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">expression </span><span class="token keyword">as</span> <span class="token language-javascript">name </span><span class="token language-javascript"><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>...<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">expression </span><span class="token keyword">as</span> <span class="token language-javascript">name<span class="token punctuation">,</span> index </span><span class="token language-javascript"><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>...<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">expression </span><span class="token keyword">as</span> <span class="token language-javascript">name<span class="token punctuation">}</span></span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">}</span></span>...<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Iterating over lists of values can be done with an each block.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Shopping list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">}</span></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> x <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>qty<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></div></div></div><p>You can use each blocks to iterate over any array or array-like value — that is, any object with a <code>length</code> property.</p>\n<div class="side-by-side"><div class="copy"><p>An each block can also specify an <em>index</em>, equivalent to the second argument in an <code>array.map(...)</code> callback:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> i<span class="token punctuation">}</span></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span>: <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> x <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>qty<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If a <em>key</em> expression is provided — which must uniquely identify each list item — Svelte will use it to diff the list when data changes, rather than adding or removing items at the end. The key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> x <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>qty<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n\n<span class="token comment">&lt;!-- or with additional index value --></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> i </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span>: <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> x <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>qty<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>You can freely use destructuring and rest patterns in each blocks.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript"><span class="token punctuation">{</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> qty <span class="token punctuation">}</span><span class="token punctuation">,</span> i </span><span class="token language-javascript"><span class="token punctuation">(</span>id<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span>: <span class="token language-javascript"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span> x <span class="token language-javascript"><span class="token punctuation">{</span>qty<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">objects </span><span class="token keyword">as</span> <span class="token language-javascript"><span class="token punctuation">{</span> id<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript"><span class="token punctuation">[</span>id<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span><span class="token punctuation">}</span></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">values=</span><span class="token language-javascript"><span class="token punctuation">{</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>An each block can also have an <code>{:else}</code> clause, which is rendered if the list is empty.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">todos </span><span class="token keyword">as</span> <span class="token language-javascript">todo<span class="token punctuation">}</span></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>No tasks today!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="await" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#await" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{#await ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>then name<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>catch name<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>then name<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> expression then name<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Await blocks allow you to branch on the three possible states of a Promise — pending, fulfilled or rejected.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> promise<span class="token punctuation">}</span></span>\n\t<span class="token comment">&lt;!-- promise is pending --></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>waiting for the promise to resolve...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>then value<span class="token punctuation">}</span></span>\n\t<span class="token comment">&lt;!-- promise was fulfilled --></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The value is <span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>catch error<span class="token punctuation">}</span></span>\n\t<span class="token comment">&lt;!-- promise was rejected --></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Something went wrong: <span class="token language-javascript"><span class="token punctuation">{</span>error<span class="token punctuation">.</span>message<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>The <code>catch</code> block can be omitted if you don&#39;t need to render anything when the promise rejects (or no error is possible).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> promise<span class="token punctuation">}</span></span>\n\t<span class="token comment">&lt;!-- promise is pending --></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>waiting for the promise to resolve...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>then value<span class="token punctuation">}</span></span>\n\t<span class="token comment">&lt;!-- promise was fulfilled --></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The value is <span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If you don&#39;t care about the pending state, you can also omit the initial block.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> promise then value<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The value is <span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="key" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#key" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{#key ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#key expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span>key<span class="token punctuation">}</span></span></code></pre></div><p>Key blocks destroy and recreate their contents when the value of an expression changes.</p>\n<div class="side-by-side"><div class="copy"><p>This is useful if you want an element to play its transition whenever a value changes.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#key value<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span>key<span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>When used around components, this will cause them to be reinstantiated and reinitialised.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#key value<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token punctuation">/></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span>key<span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="html" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#html" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{@html ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>@html expression<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>In a text expression, characters like <code>&lt;</code> and <code>&gt;</code> are escaped; however, with HTML expressions, they&#39;re not.</p>\n<p>The expression should be valid standalone HTML — <code>{@html &quot;&lt;div&gt;&quot;}content{@html &quot;&lt;/div&gt;&quot;}</code> will <em>not</em> work, because <code>&lt;/div&gt;</code> is not valid HTML.</p>\n<blockquote>\n<p>Svelte does not sanitize expressions before injecting HTML. If the data comes from an untrusted source, you must sanitize it, or you are exposing your users to an XSS vulnerability.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog-post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n\t<span class="token language-javascript"><span class="token punctuation">{</span>@html post<span class="token punctuation">.</span>content<span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="debug" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#debug" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{@debug ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>@debug<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>@debug var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> varN<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>{@debug ...}</code> tag offers an alternative to <code>console.log(...)</code>. It logs the values of specific variables whenever they change, and pauses code execution if you have devtools open.</p>\n<p>It accepts a comma-separated list of variable names (not arbitrary expressions).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\tfirstname<span class="token operator">:</span> <span class="token string">\'Ada\'</span><span class="token punctuation">,</span>\n\t\tlastname<span class="token operator">:</span> <span class="token string">\'Lovelace\'</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug user<span class="token punctuation">}</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">{</span>user<span class="token punctuation">.</span>firstname<span class="token punctuation">}</span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p><code>{@debug ...}</code> accepts a comma-separated list of variable names (not arbitrary expressions).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- Compiles --></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug user<span class="token punctuation">}</span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">}</span></span>\n\n<span class="token comment">&lt;!-- WON\'T compile --></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug user<span class="token punctuation">.</span>firstname<span class="token punctuation">}</span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug <span class="token operator">!</span>isReady<span class="token punctuation">}</span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug <span class="token keyword">typeof</span> user <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">}</span></span></code></pre></div></div></div><p>The <code>{@debug}</code> tag without any arguments will insert a <code>debugger</code> statement that gets triggered when <em>any</em> state changes, as opposed to the specified variables.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Element_directives" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Element_directives" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tElement directives\n\t\t\t\t\t</h3><p>As well as attributes, elements can have <em>directives</em>, which control the element&#39;s behaviour in some way.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="on_element_event" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#on_element_event" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\ton:<em>eventname</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>on:eventname=<span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>on:eventname|modifiers=<span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Use the <code>on:</code> directive to listen to DOM events.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tcount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\tcount: <span class="token language-javascript"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Handlers can be declared inline with no performance penalty. As with attributes, directive values may be quoted for the sake of syntax highlighters.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\tcount: <span class="token language-javascript"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Add <em>modifiers</em> to DOM events with the <code>|</code> character.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">on:</span>submit|preventDefault=</span><span class="token language-javascript"><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token comment">&lt;!-- the `submit` event\'s default is prevented,\n\t\t so the page won\'t reload --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></div></div></div><p>The following modifiers are available:</p>\n<ul>\n<li><code>preventDefault</code> — calls <code>event.preventDefault()</code> before running the handler</li>\n<li><code>stopPropagation</code> — calls <code>event.stopPropagation()</code>, preventing the event reaching the next element</li>\n<li><code>passive</code> — improves scrolling performance on touch/wheel events (Svelte will add it automatically where it&#39;s safe to do so)</li>\n<li><code>nonpassive</code> — explicitly set <code>passive: false</code></li>\n<li><code>capture</code> — fires the handler during the <em>capture</em> phase instead of the <em>bubbling</em> phase</li>\n<li><code>once</code> — remove the handler after the first time it runs</li>\n<li><code>self</code> — only trigger handler if event.target is the element itself</li>\n</ul>\n<p>Modifiers can be chained together, e.g. <code>on:click|once|capture={...}</code>.</p>\n<div class="side-by-side"><div class="copy"><p>If the <code>on:</code> directive is used without a value, the component will <em>forward</em> the event, meaning that a consumer of the component can listen for it.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click</span><span class="token punctuation">></span></span>\n\tThe component itself will emit the click event\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>It&#39;s possible to have multiple event listeners for the same event:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tcounter <span class="token operator">=</span> counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">trackEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span>increment<span class="token punctuation">}</span></span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span>track<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="bind_element_property" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#bind_element_property" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tbind:<em>property</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>bind:property=<span class="token language-javascript"><span class="token punctuation">{</span>variable<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Data ordinarily flows down, from parent to child. The <code>bind:</code> directive allows data to flow the other way, from child to parent. Most bindings are specific to particular elements.</p>\n<p>The simplest bindings reflect the value of a property, such as <code>input.value</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>text<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">{</span>yes<span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If the name matches the value, you can use a shorthand.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- These are equivalent --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Numeric input values are coerced; even though <code>input.value</code> is a string as far as the DOM is concerned, Svelte will treat it as a number. If the input is empty or invalid (in the case of <code>type=&quot;number&quot;</code>), the value is <code>undefined</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>On <code>&lt;input&gt;</code> elements with <code>type=&quot;file&quot;</code>, you can use <code>bind:files</code> to get the <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileList" target="_blank" rel="noopener noreferrer"><code>FileList</code> of selected files</a>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Upload a picture:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>\n\t<span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/png, image/jpeg<span class="token punctuation">"</span></span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>files</span>\n\t<span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span>\n\t<span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span>\n\t<span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span>\n<span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Binding_select_value" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Binding_select_value" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tBinding <code>&lt;select&gt;</code> value\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>A <code>&lt;select&gt;</code> value binding corresponds to the <code>value</code> property on the selected <code>&lt;option&gt;</code>, which can be any value (not just strings, as is normally the case in the DOM).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>selected<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value=</span><span class="token language-javascript"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value=</span><span class="token language-javascript"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value=</span><span class="token language-javascript"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>A <code>&lt;select multiple&gt;</code> element behaves similarly to a checkbox group.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Rice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Rice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Beans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cheese<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cheese<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Guac (extra)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Guac (extra)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>When the value of an <code>&lt;option&gt;</code> matches its text content, the attribute can be omitted.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Rice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Cheese<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Guac (extra)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Elements with the <code>contenteditable</code> attribute support <code>innerHTML</code> and <code>textContent</code> bindings.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>innerHTML=</span><span class="token language-javascript"><span class="token punctuation">{</span>html<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Media_element_bindings" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Media_element_bindings" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tMedia element bindings\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Media elements (<code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code>) have their own set of bindings — six <em>readonly</em> ones...</p>\n<ul>\n<li><code>duration</code> (readonly) — the total duration of the video, in seconds</li>\n<li><code>buffered</code> (readonly) — an array of <code>{start, end}</code> objects</li>\n<li><code>played</code> (readonly) — ditto</li>\n<li><code>seekable</code> (readonly) — ditto</li>\n<li><code>seeking</code> (readonly) — boolean</li>\n<li><code>ended</code> (readonly) — boolean</li>\n</ul>\n<p>...and five <em>two-way</em> bindings:</p>\n<ul>\n<li><code>currentTime</code> — the current playback time in the video, in seconds</li>\n<li><code>playbackRate</code> — how fast or slow to play the video, where 1 is &#39;normal&#39;</li>\n<li><code>paused</code> — this one should be self-explanatory</li>\n<li><code>volume</code> — a value between 0 and 1</li>\n<li><code>muted</code> — a boolean value where <code>true</code> is muted</li>\n</ul>\n<p>Videos additionally have readonly <code>videoWidth</code> and <code>videoHeight</code> bindings.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span>\n\t<span class="token attr-name">src=</span><span class="token language-javascript"><span class="token punctuation">{</span>clip<span class="token punctuation">}</span></span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>duration</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>buffered</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>played</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>seekable</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>seeking</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>ended</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>currentTime</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>playbackRate</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>paused</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>volume</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>muted</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>videoWidth</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>videoHeight</span>\n<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Block-level_element_bindings" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Block-level_element_bindings" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tBlock-level element bindings\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Block-level elements have 4 readonly bindings, measured using a technique similar to <a href="http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/" target="_blank" rel="noopener noreferrer">this one</a>:</p>\n<ul>\n<li><code>clientWidth</code></li>\n<li><code>clientHeight</code></li>\n<li><code>offsetWidth</code></li>\n<li><code>offsetHeight</code></li>\n</ul>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>offsetWidth=</span><span class="token language-javascript"><span class="token punctuation">{</span>width<span class="token punctuation">}</span></span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>offsetHeight=</span><span class="token language-javascript"><span class="token punctuation">{</span>height<span class="token punctuation">}</span></span>\n<span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Chart</span> <span class="token language-javascript"><span class="token punctuation">{</span>width<span class="token punctuation">}</span></span> <span class="token language-javascript"><span class="token punctuation">{</span>height<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="bind_group" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#bind_group" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tbind:group\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>bind:group=<span class="token language-javascript"><span class="token punctuation">{</span>variable<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Inputs that work together can use <code>bind:group</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">let</span> tortilla <span class="token operator">=</span> <span class="token string">\'Plain\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">let</span> fillings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- grouped radio inputs are mutually exclusive --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>tortilla<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Plain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>tortilla<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Whole wheat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>tortilla<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Spinach<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- grouped checkbox inputs populate an array --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Rice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Beans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cheese<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Guac (extra)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="bind_element" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#bind_element" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tbind:this\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>bind:this=<span class="token language-javascript"><span class="token punctuation">{</span>dom_node<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>To get a reference to a DOM node, use <code>bind:this</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> onMount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">let</span> canvasElement<span class="token punctuation">;</span>\n\n\t<span class="token function">onMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> ctx <span class="token operator">=</span> canvasElement<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">drawStuff</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">{</span>canvasElement<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="class_name" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#class_name" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tclass:<em>name</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>class:name=<span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>class:name</code></pre></div><div class="side-by-side"><div class="copy"><p>A <code>class:</code> directive provides a shorter way of toggling a class on an element.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- These are equivalent --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class="</span><span class="token language-javascript"><span class="token punctuation">{</span>active <span class="token operator">?</span> <span class="token string">\'active\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">class:</span>active=</span><span class="token language-javascript"><span class="token punctuation">{</span>active<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Shorthand, for when name and value match --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">class:</span>active</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Multiple class toggles can be included --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">class:</span>active</span> <span class="token attr-name"><span class="token namespace">class:</span>inactive=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">!</span>active<span class="token punctuation">}</span></span> <span class="token attr-name"><span class="token namespace">class:</span>isAdmin</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="use_action" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#use_action" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tuse:<em>action</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>use:action</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>use:action=<span class="token language-javascript"><span class="token punctuation">{</span>parameters<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function-variable function">action</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> parameters<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tupdate<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">parameters<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n\tdestroy<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Actions are functions that are called when an element is created. They can return an object with a <code>destroy</code> method that is called after the element is unmounted:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// the node has been mounted in the DOM</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">// the node has been removed from the DOM</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>foo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>An action can have a parameter. If the returned value has an <code>update</code> method, it will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup.</p>\n<blockquote>\n<p>Don&#39;t worry about the fact that we&#39;re redeclaring the <code>foo</code> function for every component instance — Svelte will hoist any functions that don&#39;t depend on local state out of the component definition.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> bar<span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> bar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// the node has been mounted in the DOM</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">// the value of `bar` has changed</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\t\t\t<span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">// the node has been removed from the DOM</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>foo=</span><span class="token language-javascript"><span class="token punctuation">{</span>bar<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="transition_fn" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#transition_fn" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\ttransition:<em>fn</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:fn</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:fn=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:fn|local</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:fn|local=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function-variable function">transition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> params<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tdelay<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n\tduration<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n\teasing<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> number<span class="token punctuation">,</span>\n\tcss<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number<span class="token punctuation">,</span> u<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> string<span class="token punctuation">,</span>\n\ttick<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number<span class="token punctuation">,</span> u<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span></code></pre></div><div class="side-by-side"><div class="copy"><p>A transition is triggered by an element entering or leaving the DOM as a result of a state change.</p>\n<p>When a block is transitioning out, all elements inside the block, including those that do not have their own transitions, are kept in the DOM until every transition in the block has completed.</p>\n<p>The <code>transition:</code> directive indicates a <em>bidirectional</em> transition, which means it can be smoothly reversed while the transition is in progress.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span>\n\t\tfades in and out\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div><blockquote>\n<p>By default intro transitions will not play on first render. You can modify this behaviour by setting <code>intro: true</code> when you <a href="docs#Client-side_component_API" rel="noopener noreferrer">create a component</a>.</p>\n</blockquote>\n\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Transition_parameters" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Transition_parameters" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tTransition parameters\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Like actions, transitions can have parameters.</p>\n<p>(The double <code>{{curlies}}</code> aren&#39;t a special syntax; this is an object literal inside an expression tag.)</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> duration<span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\t\tflies in, fades out over two seconds\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Custom_transition_functions" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Custom_transition_functions" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tCustom transition functions\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Transitions can use custom functions. If the returned object has a <code>css</code> function, Svelte will create a CSS animation that plays on the element.</p>\n<p>The <code>t</code> argument passed to <code>css</code> is a value between <code>0</code> and <code>1</code> after the <code>easing</code> function has been applied. <em>In</em> transitions run from <code>0</code> to <code>1</code>, <em>out</em> transitions run from <code>1</code> to <code>0</code> — in other words <code>1</code> is the element&#39;s natural state, as though no transition had been applied. The <code>u</code> argument is equal to <code>1 - t</code>.</p>\n<p>The function is called repeatedly <em>before</em> the transition begins, with different <code>t</code> and <code>u</code> arguments.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> elasticOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> visible<span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">whoosh</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> existingTransform <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">\'none\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\tdelay<span class="token operator">:</span> params<span class="token punctuation">.</span>delay <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span>\n\t\t\tduration<span class="token operator">:</span> params<span class="token punctuation">.</span>duration <span class="token operator">||</span> <span class="token number">400</span><span class="token punctuation">,</span>\n\t\t\teasing<span class="token operator">:</span> params<span class="token punctuation">.</span>easing <span class="token operator">||</span> elasticOut<span class="token punctuation">,</span>\n\t\t\t<span class="token function-variable function">css</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> u</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>existingTransform<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">in:</span>whoosh</span><span class="token punctuation">></span></span>\n\t\twhooshes in\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>A custom transition function can also return a <code>tick</code> function, which is called <em>during</em> the transition with the same <code>t</code> and <code>u</code> arguments.</p>\n<blockquote>\n<p>If it&#39;s possible to use <code>css</code> instead of <code>tick</code>, do so — CSS animations can run off the main thread, preventing jank on slower devices.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">typewriter</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> <span class="token punctuation">{</span> speed <span class="token operator">=</span> <span class="token number">50</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> valid <span class="token operator">=</span> <span class="token punctuation">(</span>\n\t\t\tnode<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>\n\t\t\tnode<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType <span class="token operator">===</span> Node<span class="token punctuation">.</span><span class="token constant">TEXT_NODE</span>\n\t\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">const</span> text <span class="token operator">=</span> node<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> duration <span class="token operator">=</span> text<span class="token punctuation">.</span>length <span class="token operator">*</span> speed<span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\tduration<span class="token punctuation">,</span>\n\t\t\t<span class="token function-variable function">tick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> u</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\tnode<span class="token punctuation">.</span>textContent <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">in:</span>typewriter="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> speed<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\t\tThe quick brown fox jumps over the lazy dog\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div><p>If a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making <a href="tutorial/deferred-transitions" rel="noopener noreferrer">crossfade effects</a> possible.</p>\n\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Transition_events" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Transition_events" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tTransition events\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>An element with transitions will dispatch the following events in addition to any standard DOM events:</p>\n<ul>\n<li><code>introstart</code></li>\n<li><code>introend</code></li>\n<li><code>outrostart</code></li>\n<li><code>outroend</code></li>\n</ul>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span>\n\t\t<span class="token attr-name"><span class="token namespace">transition:</span>fly="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> y<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t\t<span class="token attr-name"><span class="token namespace">on:</span>introstart="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> status <span class="token operator">=</span> <span class="token string">\'intro started\'</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t\t<span class="token attr-name"><span class="token namespace">on:</span>outrostart="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> status <span class="token operator">=</span> <span class="token string">\'outro started\'</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t\t<span class="token attr-name"><span class="token namespace">on:</span>introend="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> status <span class="token operator">=</span> <span class="token string">\'intro ended\'</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t\t<span class="token attr-name"><span class="token namespace">on:</span>outroend="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> status <span class="token operator">=</span> <span class="token string">\'outro ended\'</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t<span class="token punctuation">></span></span>\n\t\tFlies in and out\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Local transitions only play when the block they belong to is created or destroyed, <em>not</em> when parent blocks are created or destroyed.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> x<span class="token punctuation">}</span></span>\n\t<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> y<span class="token punctuation">}</span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span>\n\t\t\tfades in and out when x or y change\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade|local</span><span class="token punctuation">></span></span>\n\t\t\tfades in and out only when y changes\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n\t<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="in_fn_out_fn" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#in_fn_out_fn" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tin:<em>fn</em>/out:<em>fn</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:fn</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:fn=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:fn|local</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:fn|local=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:fn</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:fn=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:fn|local</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:fn|local=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Similar to <code>transition:</code>, but only applies to elements entering (<code>in:</code>) or leaving (<code>out:</code>) the DOM.</p>\n<p>Unlike with <code>transition:</code>, transitions applied with <code>in:</code> and <code>out:</code> are not bidirectional — an in transition will continue to &#39;play&#39; alongside the out transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">in:</span>fly</span> <span class="token attr-name"><span class="token namespace">out:</span>fade</span><span class="token punctuation">></span></span>\n\t\tflies in, fades out\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="animate_fn" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#animate_fn" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tanimate:<em>fn</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>animate:name</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>animate:name=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function-variable function">animation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token operator">:</span> DOMRect<span class="token punctuation">,</span> to<span class="token operator">:</span> DOMRect <span class="token punctuation">}</span> <span class="token punctuation">,</span> params<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tdelay<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n\tduration<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n\teasing<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> number<span class="token punctuation">,</span>\n\tcss<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number<span class="token punctuation">,</span> u<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> string<span class="token punctuation">,</span>\n\ttick<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number<span class="token punctuation">,</span> u<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code>DOMRect <span class="token punctuation">{</span>\n\tbottom<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\theight<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\tleft<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\tright<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\ttop<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\twidth<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\tx<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\ty<span class="token operator">:</span> number\n<span class="token punctuation">}</span></code></pre></div><div class="side-by-side"><div class="copy"><p>An animation is triggered when the contents of a <a href="docs#each" rel="noopener noreferrer">keyed each block</a> are re-ordered. Animations do not run when an element is removed, only when the each block&#39;s data is reordered. Animate directives must be on an element that is an <em>immediate</em> child of a keyed each block.</p>\n<p>Animations can be used with Svelte&#39;s <a href="docs#svelte_animate" rel="noopener noreferrer">built-in animation functions</a> or <a href="docs#Custom_animation_functions" rel="noopener noreferrer">custom animation functions</a>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- When `list` is reordered the animation will run--></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">list </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> index </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">animate:</span>flip</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Animation_Parameters" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Animation_Parameters" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tAnimation Parameters\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>As with actions and transitions, animations can have parameters.</p>\n<p>(The double <code>{{curlies}}</code> aren&#39;t a special syntax; this is an object literal inside an expression tag.)</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">list </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> index </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">animate:</span>flip="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> delay<span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Custom_animation_functions" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Custom_animation_functions" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tCustom animation functions\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Animations can use custom functions that provide the <code>node</code>, an <code>animation</code> object and any <code>paramaters</code> as arguments. The <code>animation</code> parameter is an object containing <code>from</code> and <code>to</code> properties each containing a <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMRect#Properties" target="_blank" rel="noopener noreferrer">DOMRect</a> describing the geometry of the element in its <code>start</code> and <code>end</code> positions. The <code>from</code> property is the DOMRect of the element in its starting position, the <code>to</code> property is the DOMRect of the element in its final position after the list has been reordered and the DOM updated.</p>\n<p>If the returned object has a <code>css</code> method, Svelte will create a CSS animation that plays on the element.</p>\n<p>The <code>t</code> argument passed to <code>css</code> is a value that goes from <code>0</code> and <code>1</code> after the <code>easing</code> function has been applied. The <code>u</code> argument is equal to <code>1 - t</code>.</p>\n<p>The function is called repeatedly <em>before</em> the animation begins, with different <code>t</code> and <code>u</code> arguments.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> cubicOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">whizz</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">,</span> to <span class="token punctuation">}</span><span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\t\t<span class="token keyword">const</span> dx <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>left <span class="token operator">-</span> to<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> dy <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>top <span class="token operator">-</span> to<span class="token punctuation">.</span>top<span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">const</span> d <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\tdelay<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n\t\t\tduration<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">120</span><span class="token punctuation">,</span>\n\t\t\teasing<span class="token operator">:</span> cubicOut<span class="token punctuation">,</span>\n\t\t\t<span class="token function-variable function">css</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> u</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n\t\t\t\t<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform: translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>u <span class="token operator">*</span> dx<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>u <span class="token operator">*</span> dy<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px) rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t<span class="token operator">*</span><span class="token number">360</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg);</span><span class="token template-punctuation string">`</span></span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">list </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> index </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">animate:</span>whizz</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>A custom animation function can also return a <code>tick</code> function, which is called <em>during</em> the animation with the same <code>t</code> and <code>u</code> arguments.</p>\n<blockquote>\n<p>If it&#39;s possible to use <code>css</code> instead of <code>tick</code>, do so — CSS animations can run off the main thread, preventing jank on slower devices.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> cubicOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">whizz</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">,</span> to <span class="token punctuation">}</span><span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\t\t<span class="token keyword">const</span> dx <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>left <span class="token operator">-</span> to<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> dy <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>top <span class="token operator">-</span> to<span class="token punctuation">.</span>top<span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">const</span> d <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\tdelay<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n\t\tduration<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">120</span><span class="token punctuation">,</span>\n\t\teasing<span class="token operator">:</span> cubicOut<span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">tick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> u</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n\t\t\tObject<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>style<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\t\t\tcolor<span class="token operator">:</span> t <span class="token operator">></span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">\'Pink\'</span> <span class="token operator">:</span> <span class="token string">\'Blue\'</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">list </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> index </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">animate:</span>whizz</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Component_directives" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Component_directives" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tComponent directives\n\t\t\t\t\t</h3>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="on_component_event" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#on_component_event" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\ton:<em>eventname</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>on:eventname=<span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Components can emit events using <a href="docs#createEventDispatcher" rel="noopener noreferrer">createEventDispatcher</a>, or by forwarding DOM events. Listening for component events looks the same as listening for DOM events:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SomeComponent</span> <span class="token attr-name"><span class="token namespace">on:</span>whatever=</span><span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>As with DOM events, if the <code>on:</code> directive is used without a value, the component will <em>forward</em> the event, meaning that a consumer of the component can listen for it.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SomeComponent</span> <span class="token attr-name"><span class="token namespace">on:</span>whatever</span><span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="bind_component_property" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#bind_component_property" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tbind:<em>property</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>bind:property=<span class="token language-javascript"><span class="token punctuation">{</span>variable<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>You can bind to component props using the same syntax as for elements.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Keypad</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>pin<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="bind_component" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#bind_component" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tbind:this\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>bind:this=<span class="token language-javascript"><span class="token punctuation">{</span>component_instance<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Components also support <code>bind:this</code>, allowing you to interact with component instances programmatically.</p>\n<blockquote>\n<p>Note that we can&#39;t do <code>{cart.empty}</code> since <code>cart</code> is <code>undefined</code> when the button is first rendered and throws an error.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ShoppingCart</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">{</span>cart<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> cart<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\tEmpty shopping cart\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="slot" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#slot" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;slot&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- optional fallback --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- optional fallback --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">prop=</span><span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Components can have child content, in the same way that elements can.</p>\n<p>The content is exposed in the child component using the <code>&lt;slot&gt;</code> element, which can contain fallback content that is rendered if no children are provided.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- App.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Widget</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>this is some child content that will overwrite the default slot content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Widget</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Widget.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>\n\t\tthis fallback content will be rendered when no content is provided, like in the first example\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="slot_name" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#slot_name" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;slot name=&quot;</code><em>name</em><code>&quot;&gt;</code>\n\t\t\t\t\t</h4><div class="side-by-side"><div class="copy"><p>Named slots allow consumers to target specific areas. They can also have fallback content.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- App.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Copyright (c) 2019 Svelte Industries<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Widget</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Widget.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>No header was provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Some content between header and footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="slot_let" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#slot_let" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;slot let:</code><em>name</em><code>={</code><em>value</em><code>}&gt;</code>\n\t\t\t\t\t</h4><div class="side-by-side"><div class="copy"><p>Slots can be rendered zero or more times, and can pass values <em>back</em> to the parent using props. The parent exposes the values to the slot template using the <code>let:</code> directive.</p>\n<p>The usual shorthand rules apply — <code>let:item</code> is equivalent to <code>let:item={item}</code>, and <code>&lt;slot {item}&gt;</code> is equivalent to <code>&lt;slot item={item}&gt;</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- App.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyList</span> <span class="token language-javascript"><span class="token punctuation">{</span>items<span class="token punctuation">}</span></span> <span class="token attr-name"><span class="token namespace">let:</span>prop=</span><span class="token language-javascript"><span class="token punctuation">{</span>thing<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>thing<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FancyList</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- FancyList.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">}</span></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fancy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\t\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">prop=</span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Named slots can also expose values. The <code>let:</code> directive goes on the element with the <code>slot</code> attribute.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- App.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyList</span> <span class="token language-javascript"><span class="token punctuation">{</span>items<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">let:</span>item</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Copyright (c) 2019 Svelte Industries<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FancyList</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- FancyList.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">}</span></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fancy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\t\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_self" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_self" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:self&gt;</code>\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>The <code>&lt;svelte:self&gt;</code> element allows a component to include itself, recursively.</p>\n<p>It cannot appear at the top level of your markup; it must be inside an if or each block to prevent an infinite loop.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> count<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>counting down... <span class="token language-javascript"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>self</span> <span class="token attr-name">count="</span><span class="token language-javascript"><span class="token punctuation">{</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">/></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>lift-off!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_component" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_component" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:component&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>component</span> <span class="token attr-name">this=</span><span class="token language-javascript"><span class="token punctuation">{</span>expression<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>&lt;svelte:component&gt;</code> element renders a component dynamically, using the component constructor specified as the <code>this</code> property. When the property changes, the component is destroyed and recreated.</p>\n<p>If <code>this</code> is falsy, no component is rendered.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>component</span> <span class="token attr-name">this=</span><span class="token language-javascript"><span class="token punctuation">{</span>currentSelection<span class="token punctuation">.</span>component<span class="token punctuation">}</span></span> <span class="token attr-name">foo=</span><span class="token language-javascript"><span class="token punctuation">{</span>bar<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_window" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_window" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:window&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>window</span> <span class="token attr-name"><span class="token namespace">on:</span>event=</span><span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>window</span> <span class="token attr-name"><span class="token namespace">bind:</span>prop=</span><span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>&lt;svelte:window&gt;</code> element allows you to add event listeners to the <code>window</code> object without worrying about removing them when the component is destroyed, or checking for the existence of <code>window</code> when server-side rendering.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">function</span> <span class="token function">handleKeydown</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pressed the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> key</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>window</span> <span class="token attr-name"><span class="token namespace">on:</span>keydown=</span><span class="token language-javascript"><span class="token punctuation">{</span>handleKeydown<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>You can also bind to the following properties:</p>\n<ul>\n<li><code>innerWidth</code></li>\n<li><code>innerHeight</code></li>\n<li><code>outerWidth</code></li>\n<li><code>outerHeight</code></li>\n<li><code>scrollX</code></li>\n<li><code>scrollY</code></li>\n<li><code>online</code> — an alias for window.navigator.onLine</li>\n</ul>\n<p>All except <code>scrollX</code> and <code>scrollY</code> are readonly.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>window</span> <span class="token attr-name"><span class="token namespace">bind:</span>scrollY=</span><span class="token language-javascript"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_body" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_body" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:body&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>body</span> <span class="token attr-name"><span class="token namespace">on:</span>event=</span><span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>As with <code>&lt;svelte:window&gt;</code>, this element allows you to add listeners to events on <code>document.body</code>, such as <code>mouseenter</code> and <code>mouseleave</code> which don&#39;t fire on <code>window</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>body</span>\n\t<span class="token attr-name"><span class="token namespace">on:</span>mouseenter=</span><span class="token language-javascript"><span class="token punctuation">{</span>handleMouseenter<span class="token punctuation">}</span></span>\n\t<span class="token attr-name"><span class="token namespace">on:</span>mouseleave=</span><span class="token language-javascript"><span class="token punctuation">{</span>handleMouseleave<span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_head" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_head" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:head&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>This element makes it possible to insert elements into <code>document.head</code>. During server-side rendering, <code>head</code> content is exposed separately to the main <code>html</code> content.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tutorial/dark-theme.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_options" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_options" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:options&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>options</span> <span class="token attr-name">option=</span><span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>&lt;svelte:options&gt;</code> element provides a place to specify per-component compiler options, which are detailed in the <a href="docs#svelte_compile" rel="noopener noreferrer">compiler section</a>. The possible options are:</p>\n<ul>\n<li><code>immutable={true}</code> — you never use mutable data, so the compiler can do simple referential equality checks to determine if values have changed</li>\n<li><code>immutable={false}</code> — the default. Svelte will be more conservative about whether or not mutable objects have changed</li>\n<li><code>accessors={true}</code> — adds getters and setters for the component&#39;s props</li>\n<li><code>accessors={false}</code> — the default</li>\n<li><code>namespace=&quot;...&quot;</code> — the namespace where this component will be used, most commonly &quot;svg&quot;</li>\n<li><code>tag=&quot;...&quot;</code> — the name to use when compiling this component as a custom element</li>\n</ul>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>options</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-custom-element<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div>',
		title: "Template syntax",
		slug: "Template_syntax",
		file: "02-template-syntax.md",
		sections: [
			{
				slug: "Tags",
				title: "Tags",
				sections: [],
			},
			{
				slug: "Attributes_and_props",
				title: "Attributes and props",
				sections: [],
			},
			{
				slug: "Text_expressions",
				title: "Text expressions",
				sections: [],
			},
			{
				slug: "Comments",
				title: "Comments",
				sections: [],
			},
			{
				slug: "if",
				title: "{#if ...}",
				sections: [],
			},
			{
				slug: "each",
				title: "{#each ...}",
				sections: [],
			},
			{
				slug: "await",
				title: "{#await ...}",
				sections: [],
			},
			{
				slug: "key",
				title: "{#key ...}",
				sections: [],
			},
			{
				slug: "html",
				title: "{@html ...}",
				sections: [],
			},
			{
				slug: "debug",
				title: "{@debug ...}",
				sections: [],
			},
			{
				slug: "Element_directives",
				title: "Element directives",
				sections: [
					{
						slug: "on_element_event",
						title: "on:<em>eventname</em>",
						sections: [],
					},
					{
						slug: "bind_element_property",
						title: "bind:<em>property</em>",
						sections: [],
					},
					{
						slug: "bind_group",
						title: "bind:group",
						sections: [],
					},
					{
						slug: "bind_element",
						title: "bind:this",
						sections: [],
					},
					{
						slug: "class_name",
						title: "class:<em>name</em>",
						sections: [],
					},
					{
						slug: "use_action",
						title: "use:<em>action</em>",
						sections: [],
					},
					{
						slug: "transition_fn",
						title: "transition:<em>fn</em>",
						sections: [],
					},
					{
						slug: "in_fn_out_fn",
						title: "in:<em>fn</em>/out:<em>fn</em>",
						sections: [],
					},
					{
						slug: "animate_fn",
						title: "animate:<em>fn</em>",
						sections: [],
					},
				],
			},
			{
				slug: "Component_directives",
				title: "Component directives",
				sections: [
					{
						slug: "on_component_event",
						title: "on:<em>eventname</em>",
						sections: [],
					},
					{
						slug: "bind_component_property",
						title: "bind:<em>property</em>",
						sections: [],
					},
					{
						slug: "bind_component",
						title: "bind:this",
						sections: [],
					},
				],
			},
			{
				slug: "slot",
				title: "&lt;slot&gt;",
				sections: [
					{
						slug: "slot_name",
						title: "&lt;slot name=&quot;<em>name</em>&quot;&gt;",
						sections: [],
					},
					{
						slug: "slot_let",
						title: "&lt;slot let:<em>name</em>={<em>value</em>}&gt;",
						sections: [],
					},
				],
			},
			{
				slug: "svelte_self",
				title: "&lt;svelte:self&gt;",
				sections: [],
			},
			{
				slug: "svelte_component",
				title: "&lt;svelte:component&gt;",
				sections: [],
			},
			{
				slug: "svelte_window",
				title: "&lt;svelte:window&gt;",
				sections: [],
			},
			{
				slug: "svelte_body",
				title: "&lt;svelte:body&gt;",
				sections: [],
			},
			{
				slug: "svelte_head",
				title: "&lt;svelte:head&gt;",
				sections: [],
			},
			{
				slug: "svelte_options",
				title: "&lt;svelte:options&gt;",
				sections: [],
			},
		],
	},
	{
		content:
			'\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte</code>\n\t\t\t\t\t</h3><p>The <code>svelte</code> package exposes <a href="tutorial/onmount" rel="noopener noreferrer">lifecycle functions</a> and the <a href="tutorial/context-api" rel="noopener noreferrer">context API</a>.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="onMount" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#onMount" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>onMount</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function">onMount</span><span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function">onMount</span><span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>onMount</code> function schedules a callback to run as soon as the component has been mounted to the DOM. It must be called during the component&#39;s initialisation (but doesn&#39;t need to live <em>inside</em> the component; it can be called from an external module).</p>\n<p><code>onMount</code> does not run inside a <a href="docs#Server-side_component_API" rel="noopener noreferrer">server-side component</a>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> onMount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte\'</span><span class="token punctuation">;</span>\n\n\t<span class="token function">onMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'the component has mounted\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If a function is returned from <code>onMount</code>, it will be called when the component is unmounted.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> onMount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte\'</span><span class="token punctuation">;</span>\n\n\t<span class="token function">onMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'beep\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div><blockquote>\n<p>This behaviour will only work when the function passed to <code>onMount</code> <em>synchronously</em> returns a value. <code>async</code> functions always return a <code>Promise</code>, and as such cannot <em>synchronously</em> return a function.</p>\n</blockquote>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="beforeUpdate" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#beforeUpdate" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>beforeUpdate</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Schedules a callback to run immediately before the component is updated after any state change.</p>\n<blockquote>\n<p>The first time the callback runs will be before the initial <code>onMount</code></p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> beforeUpdate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte\'</span><span class="token punctuation">;</span>\n\n\t<span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'the component is about to update\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="afterUpdate" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#afterUpdate" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>afterUpdate</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function">afterUpdate</span><span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Schedules a callback to run immediately after the component has been updated.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> afterUpdate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte\'</span><span class="token punctuation">;</span>\n\n\t<span class="token function">afterUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'the component just updated\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="onDestroy" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#onDestroy" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>onDestroy</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Schedules a callback to run once the component is unmounted.</p>\n<p>Out of <code>onMount</code>, <code>beforeUpdate</code>, <code>afterUpdate</code> and <code>onDestroy</code>, this is the only one that runs inside a server-side component.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> onDestroy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte\'</span><span class="token punctuation">;</span>\n\n\t<span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'the component is being destroyed\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="tick" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#tick" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>tick</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>promise<span class="token operator">:</span> Promise <span class="token operator">=</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Returns a promise that resolves once any pending state changes have been applied, or in the next microtask if there are none.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> beforeUpdate<span class="token punctuation">,</span> tick <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte\'</span><span class="token punctuation">;</span>\n\n\t<span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'the component is about to update\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">await</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'the component just updated\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="setContext" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#setContext" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>setContext</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function">setContext</span><span class="token punctuation">(</span>key<span class="token operator">:</span> any<span class="token punctuation">,</span> context<span class="token operator">:</span> any<span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Associates an arbitrary <code>context</code> object with the current component and the specified <code>key</code>. The context is then available to children of the component (including slotted content) with <code>getContext</code>.</p>\n<p>Like lifecycle functions, this must be called during component initialisation.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> setContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte\'</span><span class="token punctuation">;</span>\n\n\t<span class="token function">setContext</span><span class="token punctuation">(</span><span class="token string">\'answer\'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div><blockquote>\n<p>Context is not inherently reactive. If you need reactive values in context then you can pass a store into context, which <em>will</em> be reactive.</p>\n</blockquote>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="getContext" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#getContext" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>getContext</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>context<span class="token operator">:</span> any <span class="token operator">=</span> <span class="token function">getContext</span><span class="token punctuation">(</span>key<span class="token operator">:</span> any<span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Retrieves the context that belongs to the closest parent component with the specified <code>key</code>. Must be called during component initialisation.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> getContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'answer\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="createEventDispatcher" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#createEventDispatcher" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>createEventDispatcher</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>dispatch<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string<span class="token punctuation">,</span> detail<span class="token operator">?</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">createEventDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Creates an event dispatcher that can be used to dispatch <a href="docs#on_component_event" rel="noopener noreferrer">component events</a>. Event dispatchers are functions that can take two arguments: <code>name</code> and <code>detail</code>.</p>\n<p>Component events created with <code>createEventDispatcher</code> create a <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent" target="_blank" rel="noopener noreferrer">CustomEvent</a>. These events do not <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture" target="_blank" rel="noopener noreferrer">bubble</a> and are not cancellable with <code>event.preventDefault()</code>. The <code>detail</code> argument corresponds to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail" target="_blank" rel="noopener noreferrer">CustomEvent.detail</a> property and can contain any type of data.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> createEventDispatcher <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">createEventDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'notify\'</span><span class="token punctuation">,</span> <span class="token string">\'detail value\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>Fire Event<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Events dispatched from child components can be listened to in their parent. Any data provided when the event was dispatched is available on the <code>detail</code> property of the event object.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">function</span> <span class="token function">callbackFunction</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Notify fired! Detail: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>detail<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name"><span class="token namespace">on:</span>notify="</span><span class="token language-javascript"><span class="token punctuation">{</span>callbackFunction<span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_store" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_store" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte/store</code>\n\t\t\t\t\t</h3><p>The <code>svelte/store</code> module exports functions for creating <a href="docs#readable" rel="noopener noreferrer">readable</a>, <a href="docs#writable" rel="noopener noreferrer">writable</a> and <a href="docs#derived" rel="noopener noreferrer">derived</a> stores.</p>\n<p>Keep in mind that you don&#39;t <em>have</em> to use these functions to enjoy the <a href="docs#4_Prefix_stores_with_$_to_access_their_values" rel="noopener noreferrer">reactive <code>$store</code> syntax</a> in your components. Any object that correctly implements <code>.subscribe</code>, unsubscribe, and (optionally) <code>.set</code> is a valid store, and will work both with the special syntax, and with Svelte&#39;s built-in <a href="docs#derived" rel="noopener noreferrer"><code>derived</code> stores</a>.</p>\n<p>This makes it possible to wrap almost any other reactive state handling library for use in Svelte. Read more about the <a href="docs#Store_contract" rel="noopener noreferrer">store contract</a> to see what a correct implementation looks like.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="writable" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#writable" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>writable</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>store <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span>value<span class="token operator">:</span> any<span class="token punctuation">)</span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code>store <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span>value<span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Function that creates a store which has values that can be set from &#39;outside&#39; components. It gets created as an object with additional <code>set</code> and <code>update</code> methods.</p>\n<p><code>set</code> is a method that takes one argument which is the value to be set. The store value gets set to the value of the argument if the store value is not already equal to it.</p>\n<p><code>update</code> is a method that takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">import</span> <span class="token punctuation">{</span> writable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/store\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncount<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs \'0\'</span>\n\ncount<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs \'1\'</span>\n\ncount<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs \'2\'</span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a <code>set</code> function which changes the value of the store. It must return a <code>stop</code> function that is called when the subscriber count goes from one to zero.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">import</span> <span class="token punctuation">{</span> writable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/store\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'got a subscriber\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'no more subscribers\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncount<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// does nothing</span>\n\n<span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs \'got a subscriber\', then \'1\'</span>\n\n<span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs \'no more subscribers\'</span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="readable" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#readable" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>readable</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>store <span class="token operator">=</span> <span class="token function">readable</span><span class="token punctuation">(</span>value<span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Creates a store whose value cannot be set from &#39;outside&#39;, the first argument is the store&#39;s initial value.</p>\n<p>The second argument to <code>readable</code> is the same as the second argument to <code>writable</code>, except that it is required with <code>readable</code> (since otherwise there would be no way to update the store value).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">import</span> <span class="token punctuation">{</span> readable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/store\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token function">readable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token parameter">set</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="derived" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#derived" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>derived</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>store <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> any<span class="token punctuation">)</span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code>store <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span> initial_value<span class="token operator">:</span> any<span class="token punctuation">)</span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code>store <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>a<span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any<span class="token punctuation">)</span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code>store <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span> initial_value<span class="token operator">:</span> any<span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Derives a store from one or more other stores. Whenever those dependencies change, the callback runs.</p>\n<p>In the simplest version, <code>derived</code> takes a single store, and the callback returns a derived value.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">import</span> <span class="token punctuation">{</span> derived <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/store\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> doubled <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token parameter">$a</span> <span class="token operator">=></span> $a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>The callback can set a value asynchronously by accepting a second argument, <code>set</code>, and calling it when appropriate.</p>\n<p>In this case, you can also pass a third argument to <code>derived</code> — the initial value of the derived store before <code>set</code> is first called.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">import</span> <span class="token punctuation">{</span> derived <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/store\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> delayed <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$a<span class="token punctuation">,</span> set</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">set</span><span class="token punctuation">(</span>$a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'one moment...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If you return a function from the callback, it will be called when a) the callback runs again, or b) the last subscriber unsubscribes.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">import</span> <span class="token punctuation">{</span> derived <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/store\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> tick <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>frequency<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$frequency<span class="token punctuation">,</span> set</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t  <span class="token function">set</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> $frequency<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'one moment...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>In both cases, an array of arguments can be passed as the first argument instead of a single store.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">import</span> <span class="token punctuation">{</span> derived <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/store\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> summed <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>$a<span class="token punctuation">,</span> $b<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> $a <span class="token operator">+</span> $b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> delayed <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>$a<span class="token punctuation">,</span> $b<span class="token punctuation">]</span><span class="token punctuation">,</span> set</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">set</span><span class="token punctuation">(</span>$a <span class="token operator">+</span> $b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="get" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#get" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>get</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>value<span class="token operator">:</span> any <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Generally, you should read the value of a store by subscribing to it and using the value as it changes over time. Occasionally, you may need to retrieve the value of a store to which you&#39;re not subscribed. <code>get</code> allows you to do so.</p>\n<blockquote>\n<p>This works by creating a subscription, reading the value, then unsubscribing. It&#39;s therefore not recommended in hot code paths.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">import</span> <span class="token punctuation">{</span> get <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/store\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_motion" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_motion" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte/motion</code>\n\t\t\t\t\t</h3><p>The <code>svelte/motion</code> module exports two functions, <code>tweened</code> and <code>spring</code>, for creating writable stores whose values change over time after <code>set</code> and <code>update</code>, rather than immediately.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="tweened" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#tweened" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>tweened</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>store <span class="token operator">=</span> <span class="token function">tweened</span><span class="token punctuation">(</span>value<span class="token operator">:</span> any<span class="token punctuation">,</span> options<span class="token punctuation">)</span></code></pre></div><p>Tweened stores update their values over a fixed duration. The following options are available:</p>\n<ul>\n<li><code>delay</code> (<code>number</code>, default 0) — milliseconds before starting</li>\n<li><code>duration</code> (<code>number</code>, default 400) — milliseconds the tween lasts</li>\n<li><code>easing</code> (<code>function</code>, default <code>t =&gt; t</code>) — an <a href="docs#svelte_easing" rel="noopener noreferrer">easing function</a></li>\n<li><code>interpolate</code> (<code>function</code>) — see below</li>\n</ul>\n<p><code>store.set</code> and <code>store.update</code> can accept a second <code>options</code> argument that will override the options passed in upon instantiation.</p>\n<p>Both functions return a Promise that resolves when the tween completes. If the tween is interrupted, the promise will never resolve.</p>\n<div class="side-by-side"><div class="copy"><p>Out of the box, Svelte will interpolate between two numbers, two arrays or two objects (as long as the arrays and objects are the same &#39;shape&#39;, and their &#39;leaf&#39; properties are also numbers).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> tweened <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/motion\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> cubicOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token function">tweened</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\tduration<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n\t\teasing<span class="token operator">:</span> cubicOut\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// this is equivalent to size.update(n => n + 1)</span>\n\t\t$size <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n\t<span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span>\n\t<span class="token attr-name"><span class="token namespace">style="transform:</span></span> <span class="token attr-name">scale(</span><span class="token language-javascript"><span class="token punctuation">{</span>$size<span class="token punctuation">}</span></span><span class="token attr-name">);</span> <span class="token attr-name"><span class="token namespace">transform-origin:</span></span> <span class="token attr-name">0</span> <span class="token attr-name">0"</span>\n<span class="token punctuation">></span></span>embiggen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If the initial value is <code>undefined</code> or <code>null</code>, the first value change will take effect immediately. This is useful when you have tweened values that are based on props, and don&#39;t want any motion when the component first renders.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token function">tweened</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tduration<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>\n\teasing<span class="token operator">:</span> cubicOut\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n$<span class="token operator">:</span> $size <span class="token operator">=</span> big <span class="token operator">?</span> <span class="token number">100</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>The <code>interpolate</code> option allows you to tween between <em>any</em> arbitrary values. It must be an <code>(a, b) =&gt; t =&gt; value</code> function, where <code>a</code> is the starting value, <code>b</code> is the target value, <code>t</code> is a number between 0 and 1, and <code>value</code> is the result. For example, we can use the <a href="https://github.com/d3/d3-interpolate" target="_blank" rel="noopener noreferrer">d3-interpolate</a> package to smoothly interpolate between two colours.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> interpolateLab <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'d3-interpolate\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> tweened <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/motion\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>\n\t\t<span class="token string">\'rgb(255, 62, 0)\'</span><span class="token punctuation">,</span>\n\t\t<span class="token string">\'rgb(64, 179, 255)\'</span><span class="token punctuation">,</span>\n\t\t<span class="token string">\'rgb(103, 103, 120)\'</span>\n\t<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token function">tweened</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\tduration<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>\n\t\tinterpolate<span class="token operator">:</span> interpolateLab\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">colors </span><span class="token keyword">as</span> <span class="token language-javascript">c<span class="token punctuation">}</span></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n\t\t<span class="token attr-name"><span class="token namespace">style="background-color:</span></span> <span class="token language-javascript"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token attr-name">;</span> <span class="token attr-name"><span class="token namespace">color:</span></span> <span class="token attr-name">white;</span> <span class="token attr-name"><span class="token namespace">border:</span></span> <span class="token attr-name">none;"</span>\n\t\t<span class="token attr-name"><span class="token namespace">on:</span>click="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> color<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t<span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">style="color:</span></span> <span class="token language-javascript"><span class="token punctuation">{</span>$color<span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>$color<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="spring" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#spring" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>spring</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>store <span class="token operator">=</span> <span class="token function">spring</span><span class="token punctuation">(</span>value<span class="token operator">:</span> any<span class="token punctuation">,</span> options<span class="token punctuation">)</span></code></pre></div><p>A <code>spring</code> store gradually changes to its target value based on its <code>stiffness</code> and <code>damping</code> parameters. Whereas <code>tweened</code> stores change their values over a fixed duration, <code>spring</code> stores change over a duration that is determined by their existing velocity, allowing for more natural-seeming motion in many situations. The following options are available:</p>\n<ul>\n<li><code>stiffness</code> (<code>number</code>, default <code>0.15</code>) — a value between 0 and 1 where higher means a &#39;tighter&#39; spring</li>\n<li><code>damping</code> (<code>number</code>, default <code>0.8</code>) — a value between 0 and 1 where lower means a &#39;springier&#39; spring</li>\n<li><code>precision</code> (<code>number</code>, default <code>0.001</code>) — determines the threshold at which the spring is considered to have &#39;settled&#39;, where lower means more precise</li>\n</ul>\n<div class="side-by-side"><div class="copy"><p>As with <a href="docs#tweened" rel="noopener noreferrer"><code>tweened</code></a> stores, <code>set</code> and <code>update</code> return a Promise that resolves if the spring settles. The <code>store.stiffness</code> and <code>store.damping</code> properties can be changed while the spring is in motion, and will take immediate effect.</p>\n<p>Both <code>set</code> and <code>update</code> can take a second argument — an object with <code>hard</code> or <code>soft</code> properties. <code>{ hard: true }</code> sets the target value immediately; <code>{ soft: n }</code> preserves existing momentum for <code>n</code> seconds before settling. <code>{ soft: true }</code> is equivalent to <code>{ soft: 0.5 }</code>.</p>\n<p><a href="tutorial/spring" rel="noopener noreferrer">See a full example on the spring tutorial.</a></p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> spring <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/motion\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> coords <span class="token operator">=</span> <span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\tstiffness<span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>\n\t\tdamping<span class="token operator">:</span> <span class="token number">0.25</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If the initial value is <code>undefined</code> or <code>null</code>, the first value change will take effect immediately, just as with <code>tweened</code> values (see above).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n$<span class="token operator">:</span> $size <span class="token operator">=</span> big <span class="token operator">?</span> <span class="token number">100</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_transition" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_transition" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte/transition</code>\n\t\t\t\t\t</h3><p>The <code>svelte/transition</code> module exports seven functions: <code>fade</code>, <code>blur</code>, <code>fly</code>, <code>slide</code>, <code>scale</code>, <code>draw</code> and <code>crossfade</code>. They are for use with Svelte <a href="docs#transition_fn" rel="noopener noreferrer"><code>transitions</code></a>.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="fade" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#fade" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>fade</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:fade=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:fade=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:fade=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Animates the opacity of an element from 0 to the current opacity for <code>in</code> transitions and from the current opacity to 0 for <code>out</code> transitions.</p>\n<p><code>fade</code> accepts the following parameters:</p>\n<ul>\n<li><code>delay</code> (<code>number</code>, default 0) — milliseconds before starting</li>\n<li><code>duration</code> (<code>number</code>, default 400) — milliseconds the transition lasts</li>\n<li><code>easing</code> (<code>function</code>, default <code>linear</code>) — an <a href="docs#svelte_easing" rel="noopener noreferrer">easing function</a></li>\n</ul>\n<p>You can see the <code>fade</code> transition in action in the <a href="tutorial/transition" rel="noopener noreferrer">transition tutorial</a>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> fade <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/transition\'</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> condition<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span>delay<span class="token operator">:</span> <span class="token number">250</span><span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\t\tfades in and out\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="blur" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#blur" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>blur</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:blur=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:blur=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:blur=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Animates a <code>blur</code> filter alongside an element&#39;s opacity.</p>\n<p><code>blur</code> accepts the following parameters:</p>\n<ul>\n<li><code>delay</code> (<code>number</code>, default 0) — milliseconds before starting</li>\n<li><code>duration</code> (<code>number</code>, default 400) — milliseconds the transition lasts</li>\n<li><code>easing</code> (<code>function</code>, default <code>cubicInOut</code>) — an <a href="docs#svelte_easing" rel="noopener noreferrer">easing function</a></li>\n<li><code>opacity</code> (<code>number</code>, default 0) - the opacity value to animate out to and in from</li>\n<li><code>amount</code> (<code>number</code>, default 5) - the size of the blur in pixels</li>\n</ul>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> blur <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/transition\'</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> condition<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>blur="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span>amount<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\t\tfades in and out\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="fly" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#fly" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>fly</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:fly=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:fly=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:fly=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Animates the x and y positions and the opacity of an element. <code>in</code> transitions animate from an element&#39;s current (default) values to the provided values, passed as parameters. <code>out</code> transitions animate from the provided values to an element&#39;s default values.</p>\n<p><code>fly</code> accepts the following parameters:</p>\n<ul>\n<li><code>delay</code> (<code>number</code>, default 0) — milliseconds before starting</li>\n<li><code>duration</code> (<code>number</code>, default 400) — milliseconds the transition lasts</li>\n<li><code>easing</code> (<code>function</code>, default <code>cubicOut</code>) — an <a href="docs#svelte_easing" rel="noopener noreferrer">easing function</a></li>\n<li><code>x</code> (<code>number</code>, default 0) - the x offset to animate out to and in from</li>\n<li><code>y</code> (<code>number</code>, default 0) - the y offset to animate out to and in from</li>\n<li><code>opacity</code> (<code>number</code>, default 0) - the opacity value to animate out to and in from</li>\n</ul>\n<p>You can see the <code>fly</code> transition in action in the <a href="tutorial/adding-parameters-to-transitions" rel="noopener noreferrer">transition tutorial</a>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> fly <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/transition\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> quintOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> condition<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>fly="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span>delay<span class="token operator">:</span> <span class="token number">250</span><span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> opacity<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> easing<span class="token operator">:</span> quintOut<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\t\tflies in and out\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="slide" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#slide" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>slide</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:slide=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:slide=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:slide=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Slides an element in and out.</p>\n<p><code>slide</code> accepts the following parameters:</p>\n<ul>\n<li><code>delay</code> (<code>number</code>, default 0) — milliseconds before starting</li>\n<li><code>duration</code> (<code>number</code>, default 400) — milliseconds the transition lasts</li>\n<li><code>easing</code> (<code>function</code>, default <code>cubicOut</code>) — an <a href="docs#svelte_easing" rel="noopener noreferrer">easing function</a></li>\n</ul>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> slide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/transition\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> quintOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> condition<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>slide="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span>delay<span class="token operator">:</span> <span class="token number">250</span><span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> easing<span class="token operator">:</span> quintOut <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\t\tslides in and out\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="scale" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#scale" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>scale</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:scale=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:scale=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:scale=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Animates the opacity and scale of an element. <code>in</code> transitions animate from an element&#39;s current (default) values to the provided values, passed as parameters. <code>out</code> transitions animate from the provided values to an element&#39;s default values.</p>\n<p><code>scale</code> accepts the following parameters:</p>\n<ul>\n<li><code>delay</code> (<code>number</code>, default 0) — milliseconds before starting</li>\n<li><code>duration</code> (<code>number</code>, default 400) — milliseconds the transition lasts</li>\n<li><code>easing</code> (<code>function</code>, default <code>cubicOut</code>) — an <a href="docs#svelte_easing" rel="noopener noreferrer">easing function</a></li>\n<li><code>start</code> (<code>number</code>, default 0) - the scale value to animate out to and in from</li>\n<li><code>opacity</code> (<code>number</code>, default 0) - the opacity value to animate out to and in from</li>\n</ul>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> scale <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/transition\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> quintOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> condition<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>scale="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span>duration<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> delay<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> opacity<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> easing<span class="token operator">:</span> quintOut<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\t\tscales in and out\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="draw" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#draw" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>draw</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:draw=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:draw=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:draw=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Animates the stroke of an SVG element, like a snake in a tube. <code>in</code> transitions begin with the path invisible and draw the path to the screen over time. <code>out</code> transitions start in a visible state and gradually erase the path. <code>draw</code> only works with elements that have a <code>getTotalLength</code> method, like <code>&lt;path&gt;</code> and <code>&lt;polyline&gt;</code>.</p>\n<p><code>draw</code> accepts the following parameters:</p>\n<ul>\n<li><code>delay</code> (<code>number</code>, default 0) — milliseconds before starting</li>\n<li><code>speed</code> (<code>number</code>, default undefined) - the speed of the animation, see below.</li>\n<li><code>duration</code> (<code>number</code> | <code>function</code>, default 800) — milliseconds the transition lasts</li>\n<li><code>easing</code> (<code>function</code>, default <code>cubicInOut</code>) — an <a href="docs#svelte_easing" rel="noopener noreferrer">easing function</a></li>\n</ul>\n<p>The <code>speed</code> parameter is a means of setting the duration of the transition relative to the path&#39;s length. It is modifier that is applied to the length of the path: <code>duration = length / speed</code>. A path that is 1000 pixels with a speed of 1 will have a duration of <code>1000ms</code>, setting the speed to <code>0.5</code> will double that duration and setting it to <code>2</code> will halve it.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> draw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/transition\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> quintOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 5 5<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\t<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> condition<span class="token punctuation">}</span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name"><span class="token namespace">transition:</span>draw="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span>duration<span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span> delay<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> easing<span class="token operator">:</span> quintOut<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t\t\t\t\t<span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M2 1 h1 v1 h1 v1 h-1 v1 h-1 v-1 h-1 v-1 h1 z<span class="token punctuation">"</span></span>\n\t\t\t\t\t<span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span>\n\t\t\t\t\t<span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cornflowerblue<span class="token punctuation">"</span></span>\n\t\t\t\t\t<span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.1px<span class="token punctuation">"</span></span>\n\t\t\t\t\t<span class="token attr-name">stroke-linejoin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>round<span class="token punctuation">"</span></span>\n\t\t<span class="token punctuation">/></span></span>\n\t<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>\n</code></pre></div></div></div><!-- Crossfade is coming soon... -->\n\n\n\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_animate" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_animate" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte/animate</code>\n\t\t\t\t\t</h3><p>The <code>svelte/animate</code> module exports one function for use with Svelte <a href="docs#animate_fn" rel="noopener noreferrer">animations</a>.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="flip" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#flip" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>flip</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>animate:flip=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><p>The <code>flip</code> function calculates the start and end position of an element and animates between them, translating the <code>x</code> and <code>y</code> values. <code>flip</code> stands for <a href="https://aerotwist.com/blog/flip-your-animations/" target="_blank" rel="noopener noreferrer">First, Last, Invert, Play</a>.</p>\n<p><code>flip</code> accepts the following parameters:</p>\n<ul>\n<li><code>delay</code> (<code>number</code>, default 0) — milliseconds before starting</li>\n<li><code>duration</code> (<code>number</code> | <code>function</code>, default <code>d =&gt; Math.sqrt(d) * 120</code>) — see below</li>\n<li><code>easing</code> (<code>function</code>, default <a href="docs#cubicOut" rel="noopener noreferrer"><code>cubicOut</code></a>) — an <a href="docs#svelte_easing" rel="noopener noreferrer">easing function</a></li>\n</ul>\n<p><code>duration</code> can be be provided as either:</p>\n<ul>\n<li>a <code>number</code>, in milliseconds.</li>\n<li>a function, <code>distance: number =&gt; duration: number</code>, receiving the distance the element will travel in pixels and returning the duration in milliseconds. This allows you to assign a duration that is relative to the distance travelled by each element.</li>\n</ul>\n<div class="side-by-side"><div class="copy"><p>You can see a full example on the <a href="tutorial/animate" rel="noopener noreferrer">animations tutorial</a></p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> flip <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/animate\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> quintOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">list </span><span class="token keyword">as</span> <span class="token language-javascript">n </span><span class="token language-javascript"><span class="token punctuation">(</span>n<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">animate:</span>flip="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span>delay<span class="token operator">:</span> <span class="token number">250</span><span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">250</span><span class="token punctuation">,</span> easing<span class="token operator">:</span> quintOut<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\t\t<span class="token language-javascript"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_easing" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_easing" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte/easing</code>\n\t\t\t\t\t</h3><p>Easing functions specify the rate of change over time and are useful when working with Svelte&#39;s built-in transitions and animations as well as the tweened and spring utilities. <code>svelte/easing</code> contains 31 named exports, a <code>linear</code> ease and 3 variants of 10 different easing functions: <code>in</code>, <code>out</code> and <code>inOut</code>.</p>\n<p>You can explore the various eases using the <a href="examples#easing" rel="noopener noreferrer">ease visualiser</a> in the <a href="examples" rel="noopener noreferrer">examples section</a>.</p>\n<table>\n<thead>\n<tr>\n<th>ease</th>\n<th>in</th>\n<th>out</th>\n<th>inOut</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>back</strong></td>\n<td><code>backIn</code></td>\n<td><code>backOut</code></td>\n<td><code>backInOut</code></td>\n</tr>\n<tr>\n<td><strong>bounce</strong></td>\n<td><code>bounceIn</code></td>\n<td><code>bounceOut</code></td>\n<td><code>bounceInOut</code></td>\n</tr>\n<tr>\n<td><strong>circ</strong></td>\n<td><code>circIn</code></td>\n<td><code>circOut</code></td>\n<td><code>circInOut</code></td>\n</tr>\n<tr>\n<td><strong>cubic</strong></td>\n<td><code>cubicIn</code></td>\n<td><code>cubicOut</code></td>\n<td><code>cubicInOut</code></td>\n</tr>\n<tr>\n<td><strong>elastic</strong></td>\n<td><code>elasticIn</code></td>\n<td><code>elasticOut</code></td>\n<td><code>elasticInOut</code></td>\n</tr>\n<tr>\n<td><strong>expo</strong></td>\n<td><code>expoIn</code></td>\n<td><code>expoOut</code></td>\n<td><code>expoInOut</code></td>\n</tr>\n<tr>\n<td><strong>quad</strong></td>\n<td><code>quadIn</code></td>\n<td><code>quadOut</code></td>\n<td><code>quadInOut</code></td>\n</tr>\n<tr>\n<td><strong>quart</strong></td>\n<td><code>quartIn</code></td>\n<td><code>quartOut</code></td>\n<td><code>quartInOut</code></td>\n</tr>\n<tr>\n<td><strong>quint</strong></td>\n<td><code>quintIn</code></td>\n<td><code>quintOut</code></td>\n<td><code>quintInOut</code></td>\n</tr>\n<tr>\n<td><strong>sine</strong></td>\n<td><code>sineIn</code></td>\n<td><code>sineOut</code></td>\n<td><code>sineInOut</code></td>\n</tr>\n</tbody></table>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_register" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_register" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte/register</code>\n\t\t\t\t\t</h3><p>To render Svelte components in Node.js without bundling, use <code>require(&#39;svelte/register&#39;)</code>. After that, you can use <code>require</code> to include any <code>.svelte</code> file.</p>\n<div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte/register\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./App.svelte\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n\n<span class="token operator">...</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> html<span class="token punctuation">,</span> css<span class="token punctuation">,</span> head <span class="token punctuation">}</span> <span class="token operator">=</span> App<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> answer<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><blockquote>\n<p>The <code>.default</code> is necessary because we&#39;re converting from native JavaScript modules to the CommonJS modules recognised by Node. Note that if your component imports JavaScript modules, they will fail to load in Node and you will need to use a bundler instead.</p>\n</blockquote>\n<p>To set compile options, or to use a custom file extension, call the <code>register</code> hook as a function:</p>\n<div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte/register\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.customextension\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// defaults to [\'.html\', \'.svelte\']</span>\n\tpreserveComments<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Client-side_component_API" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Client-side_component_API" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tClient-side component API\n\t\t\t\t\t</h3>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="Creating_a_component" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Creating_a_component" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tCreating a component\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span></code></pre></div><p>A client-side component — that is, a component compiled with <code>generate: &#39;dom&#39;</code> (or the <code>generate</code> option left unspecified) is a JavaScript class.</p>\n<div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App.svelte\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\ttarget<span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">,</span>\n\tprops<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// assuming App.svelte contains something like</span>\n\t\t<span class="token comment">// `export let answer`:</span>\n\t\tanswer<span class="token operator">:</span> <span class="token number">42</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>The following initialisation options can be provided:</p>\n<table>\n<thead>\n<tr>\n<th>option</th>\n<th>default</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>target</code></td>\n<td><strong>none</strong></td>\n<td>An <code>HTMLElement</code> to render to. This option is required</td>\n</tr>\n<tr>\n<td><code>anchor</code></td>\n<td><code>null</code></td>\n<td>A child of <code>target</code> to render the component immediately before</td>\n</tr>\n<tr>\n<td><code>props</code></td>\n<td><code>{}</code></td>\n<td>An object of properties to supply to the component</td>\n</tr>\n<tr>\n<td><code>hydrate</code></td>\n<td><code>false</code></td>\n<td>See below</td>\n</tr>\n<tr>\n<td><code>intro</code></td>\n<td><code>false</code></td>\n<td>If <code>true</code>, will play transitions on initial render, rather than waiting for subsequent state changes</td>\n</tr>\n</tbody></table>\n<p>Existing children of <code>target</code> are left where they are.</p>\n<div class="side-by-side"><div class="copy"><p>The <code>hydrate</code> option instructs Svelte to upgrade existing DOM (usually from server-side rendering) rather than creating new elements. It will only work if the component was compiled with the <a href="docs#svelte_compile" rel="noopener noreferrer"><code>hydratable: true</code> option</a>. Hydration of <code>&lt;head&gt;</code> elements only works properly if the server-side rendering code was also compiled with <code>hydratable: true</code>, which adds a marker to each element in the <code>&lt;head&gt;</code> so that the component knows which elements it&#39;s responsible for removing during hydration.</p>\n<p>Whereas children of <code>target</code> are normally left alone, <code>hydrate: true</code> will cause any children to be removed. For that reason, the <code>anchor</code> option cannot be used alongside <code>hydrate: true</code>.</p>\n<p>The existing DOM doesn&#39;t need to match the component — Svelte will &#39;repair&#39; the DOM as it goes.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App.svelte\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\ttarget<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#server-rendered-html\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\thydrate<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="$set" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#$set" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>$set</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>component<span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Programmatically sets props on an instance. <code>component.$set({ x: 1 })</code> is equivalent to <code>x = 1</code> inside the component&#39;s <code>&lt;script&gt;</code> block.</p>\n<p>Calling this method schedules an update for the next microtask — the DOM is <em>not</em> updated synchronously.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code>component<span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> answer<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="$on" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#$on" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>$on</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>component<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> callback<span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Causes the <code>callback</code> function to be called whenever the component dispatches an <code>event</code>.</p>\n<p>A function is returned that will remove the event listener when called.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> off <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">\'selected\'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>selection<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="$destroy" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#$destroy" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>$destroy</code>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>component<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><p>Removes a component from the DOM and triggers any <code>onDestroy</code> handlers.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="Component_props" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Component_props" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tComponent props\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-javascript\'><code>component<span class="token punctuation">.</span>prop</code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code>component<span class="token punctuation">.</span>prop <span class="token operator">=</span> value</code></pre></div><div class="side-by-side"><div class="copy"><p>If a component is compiled with <code>accessors: true</code>, each instance will have getters and setters corresponding to each of the component&#39;s props. Setting a value will cause a <em>synchronous</em> update, rather than the default async update caused by <code>component.$set(...)</code>.</p>\n<p>By default, <code>accessors</code> is <code>false</code>, unless you&#39;re compiling as a custom element.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Custom_element_API" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Custom_element_API" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tCustom element API\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>Svelte components can also be compiled to custom elements (aka web components) using the <code>customElement: true</code> compiler option. You should specify a tag name for the component using the <code>&lt;svelte:options&gt;</code> <a href="docs#svelte_options" rel="noopener noreferrer">element</a>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>options</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-element<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">\'world\'</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Alternatively, use <code>tag={null}</code> to indicate that the consumer of the custom element should name it.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">import</span> MyElement <span class="token keyword">from</span> <span class="token string">\'./MyElement.svelte\'</span><span class="token punctuation">;</span>\n\ncustomElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">\'my-element\'</span><span class="token punctuation">,</span> MyElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Once a custom element has been defined, it can be used as a regular DOM element:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n\t&lt;my-element>\n\t\t&lt;p>This is some slotted content&lt;/p>\n\t&lt;/my-element>\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>By default, custom elements are compiled with <code>accessors: true</code>, which means that any <a href="docs#Attributes_and_props" rel="noopener noreferrer">props</a> are exposed as properties of the DOM element (as well as being readable/writable as attributes, where possible).</p>\n<p>To prevent this, add <code>accessors={false}</code> to <code>&lt;svelte:options&gt;</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'my-element\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// get the current value of the \'name\' prop</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// set a new value, updating the shadow DOM</span>\nel<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'everybody\'</span><span class="token punctuation">;</span></code></pre></div></div></div><p>Custom elements can be a useful way to package components for consumption in a non-Svelte app, as they will work with vanilla HTML and JavaScript as well as <a href="https://custom-elements-everywhere.com/" target="_blank" rel="noopener noreferrer">most frameworks</a>. There are, however, some important differences to be aware of:</p>\n<ul>\n<li>Styles are <em>encapsulated</em>, rather than merely <em>scoped</em>. This means that any non-component styles (such as you might have in a <code>global.css</code> file) will not apply to the custom element, including styles with the <code>:global(...)</code> modifier</li>\n<li>Instead of being extracted out as a separate .css file, styles are inlined into the component as a JavaScript string</li>\n<li>Custom elements are not generally suitable for server-side rendering, as the shadow DOM is invisible until JavaScript loads</li>\n<li>In Svelte, slotted content renders <em>lazily</em>. In the DOM, it renders <em>eagerly</em>. In other words, it will always be created even if the component&#39;s <code>&lt;slot&gt;</code> element is inside an <code>{#if ...}</code> block. Similarly, including a <code>&lt;slot&gt;</code> in an <code>{#each ...}</code> block will not cause the slotted content to be rendered multiple times</li>\n<li>The <code>let:</code> directive has no effect</li>\n<li>Polyfills are required to support older browsers</li>\n</ul>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Server-side_component_API" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Server-side_component_API" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tServer-side component API\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> result <span class="token operator">=</span> Component<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Unlike client-side components, server-side components don&#39;t have a lifespan after you render them — their whole job is to create some HTML and CSS. For that reason, the API is somewhat different.</p>\n<p>A server-side component exposes a <code>render</code> method that can be called with optional props. It returns an object with <code>head</code>, <code>html</code>, and <code>css</code> properties, where <code>head</code> contains the contents of any <code>&lt;svelte:head&gt;</code> elements encountered.</p>\n<p>You can import a Svelte component directly into Node using <a href="docs#svelte_register" rel="noopener noreferrer"><code>svelte/register</code></a>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte/register\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./App.svelte\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> head<span class="token punctuation">,</span> html<span class="token punctuation">,</span> css <span class="token punctuation">}</span> <span class="token operator">=</span> App<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tanswer<span class="token operator">:</span> <span class="token number">42</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div>',
		title: "Run time",
		slug: "Run_time",
		file: "03-run-time.md",
		sections: [
			{
				slug: "svelte",
				title: "svelte",
				sections: [
					{
						slug: "onMount",
						title: "onMount",
						sections: [],
					},
					{
						slug: "beforeUpdate",
						title: "beforeUpdate",
						sections: [],
					},
					{
						slug: "afterUpdate",
						title: "afterUpdate",
						sections: [],
					},
					{
						slug: "onDestroy",
						title: "onDestroy",
						sections: [],
					},
					{
						slug: "tick",
						title: "tick",
						sections: [],
					},
					{
						slug: "setContext",
						title: "setContext",
						sections: [],
					},
					{
						slug: "getContext",
						title: "getContext",
						sections: [],
					},
					{
						slug: "createEventDispatcher",
						title: "createEventDispatcher",
						sections: [],
					},
				],
			},
			{
				slug: "svelte_store",
				title: "svelte/store",
				sections: [
					{
						slug: "writable",
						title: "writable",
						sections: [],
					},
					{
						slug: "readable",
						title: "readable",
						sections: [],
					},
					{
						slug: "derived",
						title: "derived",
						sections: [],
					},
					{
						slug: "get",
						title: "get",
						sections: [],
					},
				],
			},
			{
				slug: "svelte_motion",
				title: "svelte/motion",
				sections: [
					{
						slug: "tweened",
						title: "tweened",
						sections: [],
					},
					{
						slug: "spring",
						title: "spring",
						sections: [],
					},
				],
			},
			{
				slug: "svelte_transition",
				title: "svelte/transition",
				sections: [
					{
						slug: "fade",
						title: "fade",
						sections: [],
					},
					{
						slug: "blur",
						title: "blur",
						sections: [],
					},
					{
						slug: "fly",
						title: "fly",
						sections: [],
					},
					{
						slug: "slide",
						title: "slide",
						sections: [],
					},
					{
						slug: "scale",
						title: "scale",
						sections: [],
					},
					{
						slug: "draw",
						title: "draw",
						sections: [],
					},
				],
			},
			{
				slug: "svelte_animate",
				title: "svelte/animate",
				sections: [
					{
						slug: "flip",
						title: "flip",
						sections: [],
					},
				],
			},
			{
				slug: "svelte_easing",
				title: "svelte/easing",
				sections: [],
			},
			{
				slug: "svelte_register",
				title: "svelte/register",
				sections: [],
			},
			{
				slug: "Client-side_component_API",
				title: "Client-side component API",
				sections: [
					{
						slug: "Creating_a_component",
						title: "Creating a component",
						sections: [],
					},
					{
						slug: "$set",
						title: "$set",
						sections: [],
					},
					{
						slug: "$on",
						title: "$on",
						sections: [],
					},
					{
						slug: "$destroy",
						title: "$destroy",
						sections: [],
					},
					{
						slug: "Component_props",
						title: "Component props",
						sections: [],
					},
				],
			},
			{
				slug: "Custom_element_API",
				title: "Custom element API",
				sections: [],
			},
			{
				slug: "Server-side_component_API",
				title: "Server-side component API",
				sections: [],
			},
		],
	},
	{
		content:
			'<p>Typically, you won&#39;t interact with the Svelte compiler directly, but will instead integrate it into your build system using a bundler plugin:</p>\n<ul>\n<li><a href="https://github.com/sveltejs/rollup-plugin-svelte" target="_blank" rel="noopener noreferrer">rollup-plugin-svelte</a> for users of <a href="https://rollupjs.org" target="_blank" rel="noopener noreferrer">Rollup</a></li>\n<li><a href="https://github.com/sveltejs/svelte-loader" target="_blank" rel="noopener noreferrer">svelte-loader</a> for users of <a href="https://webpack.js.org" target="_blank" rel="noopener noreferrer">webpack</a></li>\n<li>or one of the <a href="https://github.com/sveltejs/integrations#bundler-plugins" target="_blank" rel="noopener noreferrer">community-maintained plugins</a></li>\n</ul>\n<p>Nonetheless, it&#39;s useful to understand how to use the compiler, since bundler plugins generally expose compiler options to you.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_compile" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_compile" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte.compile</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-javascript\'><code>result<span class="token operator">:</span> <span class="token punctuation">{</span>\n\tjs<span class="token punctuation">,</span>\n\tcss<span class="token punctuation">,</span>\n\tast<span class="token punctuation">,</span>\n\twarnings<span class="token punctuation">,</span>\n\tvars<span class="token punctuation">,</span>\n\tstats\n<span class="token punctuation">}</span> <span class="token operator">=</span> svelte<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>source<span class="token operator">:</span> string<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>This is where the magic happens. <code>svelte.compile</code> takes your component source code, and turns it into a JavaScript module that exports a class.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> svelte <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte/compiler\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> svelte<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// options</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div><p>The following options can be passed to the compiler. None are required:</p>\n<!-- | option | type | default\n| --- | --- | --- |\n| `filename` | string | `null`\n| `name` | string | `"Component"`\n| `format` | `"esm"` or `"cjs"` | `"esm"`\n| `generate` | `"dom"` or `"ssr"` | `"dom"`\n| `dev` | boolean | `false`\n| `immutable` | boolean | `false`\n| `hydratable` | boolean | `false`\n| `legacy` | boolean | `false`\n| `customElement` | boolean | `false`\n| `tag` | string | null\n| `accessors` | boolean | `false`\n| `css` | boolean | `true`\n| `loopGuardTimeout` | number | 0\n| `preserveComments` | boolean | `false`\n| `preserveWhitespace` | boolean | `false`\n| `outputFilename` | string | `null`\n| `cssOutputFilename` | string | `null`\n| `sveltePath` | string | `"svelte"` -->\n\n<table>\n<thead>\n<tr>\n<th>option</th>\n<th>default</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>filename</code></td>\n<td><code>null</code></td>\n<td><code>string</code> used for debugging hints and sourcemaps. Your bundler plugin will set it automatically.</td>\n</tr>\n<tr>\n<td><code>name</code></td>\n<td><code>&quot;Component&quot;</code></td>\n<td><code>string</code> that sets the name of the resulting JavaScript class (though the compiler will rename it if it would otherwise conflict with other variables in scope). It will normally be inferred from <code>filename</code>.</td>\n</tr>\n<tr>\n<td><code>format</code></td>\n<td><code>&quot;esm&quot;</code></td>\n<td>If <code>&quot;esm&quot;</code>, creates a JavaScript module (with <code>import</code> and <code>export</code>). If <code>&quot;cjs&quot;</code>, creates a CommonJS module (with <code>require</code> and <code>module.exports</code>), which is useful in some server-side rendering situations or for testing.</td>\n</tr>\n<tr>\n<td><code>generate</code></td>\n<td><code>&quot;dom&quot;</code></td>\n<td>If <code>&quot;dom&quot;</code>, Svelte emits a JavaScript class for mounting to the DOM. If <code>&quot;ssr&quot;</code>, Svelte emits an object with a <code>render</code> method suitable for server-side rendering. If <code>false</code>, no JavaScript or CSS is returned; just metadata.</td>\n</tr>\n<tr>\n<td><code>dev</code></td>\n<td><code>false</code></td>\n<td>If <code>true</code>, causes extra code to be added to components that will perform runtime checks and provide debugging information during development.</td>\n</tr>\n<tr>\n<td><code>immutable</code></td>\n<td><code>false</code></td>\n<td>If <code>true</code>, tells the compiler that you promise not to mutate any objects. This allows it to be less conservative about checking whether values have changed.</td>\n</tr>\n<tr>\n<td><code>hydratable</code></td>\n<td><code>false</code></td>\n<td>If <code>true</code> when generating DOM code, enables the <code>hydrate: true</code> runtime option, which allows a component to upgrade existing DOM rather than creating new DOM from scratch. When generating SSR code, this adds markers to <code>&lt;head&gt;</code> elements so that hydration knows which to replace.</td>\n</tr>\n<tr>\n<td><code>legacy</code></td>\n<td><code>false</code></td>\n<td>If <code>true</code>, generates code that will work in IE9 and IE10, which don&#39;t support things like <code>element.dataset</code>.</td>\n</tr>\n<tr>\n<td><code>accessors</code></td>\n<td><code>false</code></td>\n<td>If <code>true</code>, getters and setters will be created for the component&#39;s props. If <code>false</code>, they will only be created for readonly exported values (i.e. those declared with <code>const</code>, <code>class</code> and <code>function</code>). If compiling with <code>customElement: true</code> this option defaults to <code>true</code>.</td>\n</tr>\n<tr>\n<td><code>customElement</code></td>\n<td><code>false</code></td>\n<td>If <code>true</code>, tells the compiler to generate a custom element constructor instead of a regular Svelte component.</td>\n</tr>\n<tr>\n<td><code>tag</code></td>\n<td><code>null</code></td>\n<td>A <code>string</code> that tells Svelte what tag name to register the custom element with. It must be a lowercase alphanumeric string with at least one hyphen, e.g. <code>&quot;my-element&quot;</code>.</td>\n</tr>\n<tr>\n<td><code>css</code></td>\n<td><code>true</code></td>\n<td>If <code>true</code>, styles will be included in the JavaScript class and injected at runtime. It&#39;s recommended that you set this to <code>false</code> and use the CSS that is statically generated, as it will result in smaller JavaScript bundles and better performance.</td>\n</tr>\n<tr>\n<td><code>loopGuardTimeout</code></td>\n<td>0</td>\n<td>A <code>number</code> that tells Svelte to break the loop if it blocks the thread for more than <code>loopGuardTimeout</code> ms. This is useful to prevent infinite loops. <strong>Only available when <code>dev: true</code></strong></td>\n</tr>\n<tr>\n<td><code>preserveComments</code></td>\n<td><code>false</code></td>\n<td>If <code>true</code>, your HTML comments will be preserved during server-side rendering. By default, they are stripped out.</td>\n</tr>\n<tr>\n<td><code>preserveWhitespace</code></td>\n<td><code>false</code></td>\n<td>If <code>true</code>, whitespace inside and between elements is kept as you typed it, rather than removed or collapsed to a single space where possible.</td>\n</tr>\n<tr>\n<td><code>outputFilename</code></td>\n<td><code>null</code></td>\n<td>A <code>string</code> used for your JavaScript sourcemap.</td>\n</tr>\n<tr>\n<td><code>cssOutputFilename</code></td>\n<td><code>null</code></td>\n<td>A <code>string</code> used for your CSS sourcemap.</td>\n</tr>\n<tr>\n<td><code>sveltePath</code></td>\n<td><code>&quot;svelte&quot;</code></td>\n<td>The location of the <code>svelte</code> package. Any imports from <code>svelte</code> or <code>svelte/[module]</code> will be modified accordingly.</td>\n</tr>\n</tbody></table>\n<div class="side-by-side"><div class="copy"><p>The returned <code>result</code> object contains the code for your component, along with useful bits of metadata.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> <span class="token punctuation">{</span>\n\tjs<span class="token punctuation">,</span>\n\tcss<span class="token punctuation">,</span>\n\tast<span class="token punctuation">,</span>\n\twarnings<span class="token punctuation">,</span>\n\tvars<span class="token punctuation">,</span>\n\tstats\n<span class="token punctuation">}</span> <span class="token operator">=</span> svelte<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div><ul>\n<li><code>js</code> and <code>css</code> are objects with the following properties:<ul>\n<li><code>code</code> is a JavaScript string</li>\n<li><code>map</code> is a sourcemap with additional <code>toString()</code> and <code>toUrl()</code> convenience methods</li>\n</ul>\n</li>\n<li><code>ast</code> is an abstract syntax tree representing the structure of your component.</li>\n<li><code>warnings</code> is an array of warning objects that were generated during compilation. Each warning has several properties:<ul>\n<li><code>code</code> is a string identifying the category of warning</li>\n<li><code>message</code> describes the issue in human-readable terms</li>\n<li><code>start</code> and <code>end</code>, if the warning relates to a specific location, are objects with <code>line</code>, <code>column</code> and <code>character</code> properties</li>\n<li><code>frame</code>, if applicable, is a string highlighting the offending code with line numbers</li>\n</ul>\n</li>\n<li><code>vars</code> is an array of the component&#39;s declarations, used by <a href="https://github.com/sveltejs/eslint-plugin-svelte3" target="_blank" rel="noopener noreferrer">eslint-plugin-svelte3</a> for example. Each variable has several properties:<ul>\n<li><code>name</code> is self-explanatory</li>\n<li><code>export_name</code> is the name the value is exported as, if it is exported (will match <code>name</code> unless you do <code>export...as</code>)</li>\n<li><code>injected</code> is <code>true</code> if the declaration is injected by Svelte, rather than in the code you wrote</li>\n<li><code>module</code> is <code>true</code> if the value is declared in a <code>context=&quot;module&quot;</code> script</li>\n<li><code>mutated</code> is <code>true</code> if the value&#39;s properties are assigned to inside the component</li>\n<li><code>reassigned</code> is <code>true</code> if the value is reassigned inside the component</li>\n<li><code>referenced</code> is <code>true</code> if the value is used in the template</li>\n<li><code>referenced_from_script</code> is <code>true</code> if the value is used in the <code>&lt;script&gt;</code> outside the declaration</li>\n<li><code>writable</code> is <code>true</code> if the value was declared with <code>let</code> or <code>var</code> (but not <code>const</code>, <code>class</code> or <code>function</code>)</li>\n</ul>\n</li>\n<li><code>stats</code> is an object used by the Svelte developer team for diagnosing the compiler. Avoid relying on it to stay the same!</li>\n</ul>\n<!--\n\n```js\ncompiled: {\n    // `map` is a v3 sourcemap with toString()/toUrl() methods\n    js: { code: string, map: {...} },\n    css: { code: string, map: {...} },\n    ast: {...}, // ESTree-like syntax tree for the component, including HTML, CSS and JS\n    warnings: Array<{\n        code: string,\n        message: string,\n        filename: string,\n        pos: number,\n        start: { line: number, column: number },\n        end: { line: number, column: number },\n        frame: string,\n        toString: () => string\n    }>,\n    vars: Array<{\n        name: string,\n        export_name: string,\n        injected: boolean,\n        module: boolean,\n        mutated: boolean,\n        reassigned: boolean,\n        referenced: boolean,\n        referenced_from_script: boolean,\n        writable: boolean\n    }>,\n    stats: {\n        timings: { [label]: number }\n    }\n} = svelte.compile(source: string, options?: {...})\n```\n\n-->\n\n\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_parse" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_parse" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte.parse</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-javascript\'><code>ast<span class="token operator">:</span> object <span class="token operator">=</span> svelte<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>\n\tsource<span class="token operator">:</span> string<span class="token punctuation">,</span>\n\toptions<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tfilename<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>\n\t\tcustomElement<span class="token operator">?</span><span class="token operator">:</span> boolean\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>parse</code> function parses a component, returning only its abstract syntax tree. Unlike compiling with the <code>generate: false</code> option, this will not perform any validation or other analysis of the component beyond parsing it.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> svelte <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte/compiler\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> ast <span class="token operator">=</span> svelte<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">{</span> filename<span class="token operator">:</span> <span class="token string">\'App.svelte\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_preprocess" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_preprocess" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte.preprocess</code>\n\t\t\t\t\t</h3><p>A number of <a href="https://github.com/sveltejs/integrations#preprocessors" target="_blank" rel="noopener noreferrer">community-maintained preprocessing plugins</a> are available to allow you to use Svelte with tools like TypeScript, PostCSS, SCSS, and Less.</p>\n<p>You can write your own preprocessor using the <code>svelte.preprocess</code> API.</p>\n<div class=\'code-block\'><pre class=\'language-javascript\'><code>result<span class="token operator">:</span> <span class="token punctuation">{</span>\n\tcode<span class="token operator">:</span> string<span class="token punctuation">,</span>\n\tdependencies<span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> svelte<span class="token punctuation">.</span><span class="token function">preprocess</span><span class="token punctuation">(</span>\n\tsource<span class="token operator">:</span> string<span class="token punctuation">,</span>\n\tpreprocessors<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n\t\tmarkup<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">input<span class="token operator">:</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> string<span class="token punctuation">,</span> filename<span class="token operator">:</span> string <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n\t\t\tcode<span class="token operator">:</span> string<span class="token punctuation">,</span>\n\t\t\tdependencies<span class="token operator">?</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span>\n\t\t<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">,</span>\n\t\tscript<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">input<span class="token operator">:</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> string<span class="token punctuation">,</span> attributes<span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">,</span> filename<span class="token operator">:</span> string <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n\t\t\tcode<span class="token operator">:</span> string<span class="token punctuation">,</span>\n\t\t\tdependencies<span class="token operator">?</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span>\n\t\t<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">,</span>\n\t\tstyle<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">input<span class="token operator">:</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> string<span class="token punctuation">,</span> attributes<span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">,</span> filename<span class="token operator">:</span> string <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n\t\t\tcode<span class="token operator">:</span> string<span class="token punctuation">,</span>\n\t\t\tdependencies<span class="token operator">?</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span>\n\t\t<span class="token punctuation">}</span><span class="token operator">></span>\n\t<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">,</span>\n\toptions<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tfilename<span class="token operator">?</span><span class="token operator">:</span> string\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>preprocess</code> function provides convenient hooks for arbitrarily transforming component source code. For example, it can be used to convert a <code>&lt;style lang=&quot;sass&quot;&gt;</code> block into vanilla CSS.</p>\n<p>The first argument is the component source code. The second is an array of <em>preprocessors</em> (or a single preprocessor, if you only have one), where a preprocessor is an object with <code>markup</code>, <code>script</code> and <code>style</code> functions, each of which is optional.</p>\n<p>Each <code>markup</code>, <code>script</code> or <code>style</code> function must return an object (or a Promise that resolves to an object) with a <code>code</code> property, representing the transformed source code, and an optional array of <code>dependencies</code>.</p>\n<p>The <code>markup</code> function receives the entire component source text, along with the component&#39;s <code>filename</code> if it was specified in the third argument.</p>\n<blockquote>\n<p>Preprocessor functions may additionally return a <code>map</code> object alongside <code>code</code> and <code>dependencies</code>, where <code>map</code> is a sourcemap representing the transformation. In current versions of Svelte it will be ignored, but future versions of Svelte may take account of preprocessor sourcemaps.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> svelte <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte/compiler\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> svelte<span class="token punctuation">.</span><span class="token function">preprocess</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t<span class="token function-variable function">markup</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> content<span class="token punctuation">,</span> filename <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\tcode<span class="token operator">:</span> content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">\'bar\'</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tfilename<span class="token operator">:</span> <span class="token string">\'App.svelte\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>The <code>script</code> and <code>style</code> functions receive the contents of <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> elements respectively. In addition to <code>filename</code>, they get an object of the element&#39;s attributes.</p>\n<p>If a <code>dependencies</code> array is returned, it will be included in the result object. This is used by packages like <a href="https://github.com/sveltejs/rollup-plugin-svelte" target="_blank" rel="noopener noreferrer">rollup-plugin-svelte</a> to watch additional files for changes, in the case where your <code>&lt;style&gt;</code> tag has an <code>@import</code> (for example).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> svelte <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte/compiler\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> sass <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'node-sass\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> dirname <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> code<span class="token punctuation">,</span> dependencies <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> svelte<span class="token punctuation">.</span><span class="token function">preprocess</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t<span class="token function-variable function">style</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> content<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> filename <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// only process &lt;style lang="sass"></span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>attributes<span class="token punctuation">.</span>lang <span class="token operator">!==</span> <span class="token string">\'sass\'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">const</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> stats <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> sass<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\t\tfile<span class="token operator">:</span> filename<span class="token punctuation">,</span>\n\t\t\tdata<span class="token operator">:</span> content<span class="token punctuation">,</span>\n\t\t\tincludePaths<span class="token operator">:</span> <span class="token punctuation">[</span>\n\t\t\t\t<span class="token function">dirname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\t<span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">else</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\tcode<span class="token operator">:</span> css<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\tdependencies<span class="token operator">:</span> stats<span class="token punctuation">.</span>includedFiles\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tfilename<span class="token operator">:</span> <span class="token string">\'App.svelte\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Multiple preprocessors can be used together. The output of the first becomes the input to the second. <code>markup</code> functions run first, then <code>script</code> and <code>style</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> svelte <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte/compiler\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> svelte<span class="token punctuation">.</span><span class="token function">preprocess</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">[</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token function-variable function">markup</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'this runs first\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">script</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'this runs third\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">style</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'this runs fifth\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token function-variable function">markup</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'this runs second\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">script</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'this runs fourth\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">style</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'this runs sixth\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tfilename<span class="token operator">:</span> <span class="token string">\'App.svelte\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_walk" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_walk" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte.walk</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function">walk</span><span class="token punctuation">(</span>ast<span class="token operator">:</span> Node<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t<span class="token function">enter</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">,</span> parent<span class="token operator">:</span> Node<span class="token punctuation">,</span> prop<span class="token operator">:</span> string<span class="token punctuation">,</span> index<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n\t<span class="token function">leave</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">,</span> parent<span class="token operator">:</span> Node<span class="token punctuation">,</span> prop<span class="token operator">:</span> string<span class="token punctuation">,</span> index<span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>walk</code> function provides a way to walk the abstract syntax trees generated by the parser, using the compiler&#39;s own built-in instance of <a href="https://github.com/Rich-Harris/estree-walker" target="_blank" rel="noopener noreferrer">estree-walker</a>.</p>\n<p>The walker takes an abstract syntax tree to walk and an object with two optional methods: <code>enter</code> and <code>leave</code>. For each node, <code>enter</code> is called (if present). Then, unless <code>this.skip()</code> is called during <code>enter</code>, each of the children are traversed, and then <code>leave</code> is called on the node.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> svelte <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte/compiler\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsvelte<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t<span class="token function">enter</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">do_something</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">should_skip_children</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token function">leave</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">do_something_else</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_VERSION" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_VERSION" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>svelte.VERSION</code>\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>The current version, as set in package.json.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token keyword">const</span> svelte <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'svelte/compiler\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">running svelte version </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>svelte<span class="token punctuation">.</span><span class="token constant">VERSION</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></div></div>',
		title: "Compile time",
		slug: "Compile_time",
		file: "04-compile-time.md",
		sections: [
			{
				slug: "svelte_compile",
				title: "svelte.compile",
				sections: [],
			},
			{
				slug: "svelte_parse",
				title: "svelte.parse",
				sections: [],
			},
			{
				slug: "svelte_preprocess",
				title: "svelte.preprocess",
				sections: [],
			},
			{
				slug: "svelte_walk",
				title: "svelte.walk",
				sections: [],
			},
			{
				slug: "svelte_VERSION",
				title: "svelte.VERSION",
				sections: [],
			},
		],
	},
];
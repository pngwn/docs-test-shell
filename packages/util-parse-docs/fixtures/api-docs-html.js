export default {
	content:
		'\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Tags" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Tags" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tTags\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>A lowercase tag, like <code>&lt;div&gt;</code>, denotes a regular HTML element. A capitalised tag, such as <code>&lt;Widget&gt;</code> or <code>&lt;Namespace.Widget&gt;</code>, indicates a <em>component</em>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> Widget <span class="token keyword">from</span> <span class="token string">\'./Widget.svelte\'</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span><span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Attributes_and_props" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Attributes_and_props" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tAttributes and props\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>By default, attributes work exactly like their HTML counterparts.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>can\'t touch this<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>As in HTML, values may be unquoted.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>checkbox</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Attribute values can contain JavaScript expressions.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href="page</span>/<span class="token language-javascript"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>page <span class="token language-javascript"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Or they can <em>be</em> JavaScript expressions.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">!</span>clickable<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Boolean attributes are included on the element if their value is <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy" target="_blank" rel="noopener noreferrer">truthy</a> and excluded if it&#39;s <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" target="_blank" rel="noopener noreferrer">falsy</a>.</p>\n<p>All other attributes are included unless their value is <a href="https://developer.mozilla.org/en-US/docs/Glossary/Nullish" target="_blank" rel="noopener noreferrer">nullish</a> (<code>null</code> or <code>undefined</code>).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-markup\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{false}</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>This input field is not required<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{null}</span><span class="token punctuation">></span></span>This div has no title attribute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>An expression might include characters that would cause syntax highlighting to fail in regular HTML, so quoting the value is permitted. The quotes do not affect how the value is parsed:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled="</span><span class="token language-javascript"><span class="token punctuation">{</span>number <span class="token operator">!==</span> <span class="token number">42</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>When the attribute name and value match (<code>name={name}</code>), they can be replaced with <code>{name}</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- These are equivalent --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled=</span><span class="token language-javascript"><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token language-javascript"><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>By convention, values passed to components are referred to as <em>properties</em> or <em>props</em> rather than <em>attributes</em>, which are a feature of the DOM.</p>\n<p>As with elements, <code>name={name}</code> can be replaced with the <code>{name}</code> shorthand.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span> <span class="token attr-name">foo=</span><span class="token language-javascript"><span class="token punctuation">{</span>bar<span class="token punctuation">}</span></span> <span class="token attr-name">answer=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token number">42</span><span class="token punctuation">}</span></span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p><em>Spread attributes</em> allow many attributes or properties to be passed to an element or component at once.</p>\n<p>An element or component can have multiple spread attributes, interspersed with regular ones.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span> <span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">...</span>things<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p><em><code>$$props</code></em> references all props that are passed to a component, including ones that are not declared with <code>export</code>. It is not generally recommended, as it is difficult for Svelte to optimise. But it can be useful in rare cases – for example, when you don&#39;t know at compile time what props might be passed to a component.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span> <span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">...</span>$$props<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p><em><code>$$restProps</code></em> contains only the props which are <em>not</em> declared with <code>export</code>. It can be used to pass down other unknown attributes to an element in a component. It shares the same optimisation problems as <em><code>$$props</code></em>, and is likewise not recommended.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-markup\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">{...$$restProps}</span><span class="token punctuation">></span></span></code></pre></div></div></div><blockquote>\n<p>The <code>value</code> attribute of an <code>input</code> element or its children <code>option</code> elements must not be set with spread attributes when using <code>bind:group</code> or <code>bind:checked</code>. Svelte needs to be able to see the element&#39;s <code>value</code> directly in the markup in these cases so that it can link it to the bound variable.</p>\n</blockquote>\n<div class="side-by-side"><div class="copy">\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Text_expressions" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Text_expressions" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tText expressions\n\t\t\t\t\t</h3></div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>expression<span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Text can also contain JavaScript expressions:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span> + <span class="token language-javascript"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span> = <span class="token language-javascript"><span class="token punctuation">{</span>a <span class="token operator">+</span> b<span class="token punctuation">}</span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Comments" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Comments" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tComments\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>You can use HTML comments inside components.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- this is a comment! --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Comments beginning with <code>svelte-ignore</code> disable warnings for the next block of markup. Usually these are accessibility warnings; make sure that you&#39;re disabling them for a good reason.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- svelte-ignore a11y-autofocus --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span> <span class="token attr-name">autofocus</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="if" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#if" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{#if ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Content that is conditionally rendered can be wrapped in an if block.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> answer <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>what was the question?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Additional conditions can be added with <code>{:else if expression}</code>, optionally ending in an <code>{:else}</code> clause.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> porridge<span class="token punctuation">.</span>temperature <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>too hot!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token number">80</span> <span class="token operator">></span> porridge<span class="token punctuation">.</span>temperature<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>too cold!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>just right!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="each" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#each" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{#each ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">expression </span><span class="token keyword">as</span> <span class="token language-javascript">name<span class="token punctuation">}</span></span></span>...<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">expression </span><span class="token keyword">as</span> <span class="token language-javascript">name<span class="token punctuation">,</span> index<span class="token punctuation">}</span></span></span>...<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">expression </span><span class="token keyword">as</span> <span class="token language-javascript">name </span><span class="token language-javascript"><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>...<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">expression </span><span class="token keyword">as</span> <span class="token language-javascript">name<span class="token punctuation">,</span> index </span><span class="token language-javascript"><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>...<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">expression </span><span class="token keyword">as</span> <span class="token language-javascript">name<span class="token punctuation">}</span></span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">}</span></span>...<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Iterating over lists of values can be done with an each block.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Shopping list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">}</span></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> x <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>qty<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></div></div></div><p>You can use each blocks to iterate over any array or array-like value — that is, any object with a <code>length</code> property.</p>\n<div class="side-by-side"><div class="copy"><p>An each block can also specify an <em>index</em>, equivalent to the second argument in an <code>array.map(...)</code> callback:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> i<span class="token punctuation">}</span></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span>: <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> x <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>qty<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If a <em>key</em> expression is provided — which must uniquely identify each list item — Svelte will use it to diff the list when data changes, rather than adding or removing items at the end. The key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> x <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>qty<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n\n<span class="token comment">&lt;!-- or with additional index value --></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> i </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span>: <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> x <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>qty<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>You can freely use destructuring and rest patterns in each blocks.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript"><span class="token punctuation">{</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> qty <span class="token punctuation">}</span><span class="token punctuation">,</span> i </span><span class="token language-javascript"><span class="token punctuation">(</span>id<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span>: <span class="token language-javascript"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span> x <span class="token language-javascript"><span class="token punctuation">{</span>qty<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">objects </span><span class="token keyword">as</span> <span class="token language-javascript"><span class="token punctuation">{</span> id<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript"><span class="token punctuation">[</span>id<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span><span class="token punctuation">}</span></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token attr-name">values=</span><span class="token language-javascript"><span class="token punctuation">{</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>An each block can also have an <code>{:else}</code> clause, which is rendered if the list is empty.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">todos </span><span class="token keyword">as</span> <span class="token language-javascript">todo<span class="token punctuation">}</span></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>No tasks today!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="await" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#await" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{#await ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>then name<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>catch name<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>then name<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> expression then name<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Await blocks allow you to branch on the three possible states of a Promise — pending, fulfilled or rejected.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> promise<span class="token punctuation">}</span></span>\n\t<span class="token comment">&lt;!-- promise is pending --></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>waiting for the promise to resolve...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>then value<span class="token punctuation">}</span></span>\n\t<span class="token comment">&lt;!-- promise was fulfilled --></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The value is <span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>catch error<span class="token punctuation">}</span></span>\n\t<span class="token comment">&lt;!-- promise was rejected --></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Something went wrong: <span class="token language-javascript"><span class="token punctuation">{</span>error<span class="token punctuation">.</span>message<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>The <code>catch</code> block can be omitted if you don&#39;t need to render anything when the promise rejects (or no error is possible).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> promise<span class="token punctuation">}</span></span>\n\t<span class="token comment">&lt;!-- promise is pending --></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>waiting for the promise to resolve...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span>then value<span class="token punctuation">}</span></span>\n\t<span class="token comment">&lt;!-- promise was fulfilled --></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The value is <span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If you don&#39;t care about the pending state, you can also omit the initial block.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">await</span> promise then value<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The value is <span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="key" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#key" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{#key ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#key expression<span class="token punctuation">}</span></span>...<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span>key<span class="token punctuation">}</span></span></code></pre></div><p>Key blocks destroy and recreate their contents when the value of an expression changes.</p>\n<div class="side-by-side"><div class="copy"><p>This is useful if you want an element to play its transition whenever a value changes.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#key value<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span>key<span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>When used around components, this will cause them to be reinstantiated and reinitialised.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#key value<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token punctuation">/></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span>key<span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="html" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#html" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{@html ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>@html expression<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>In a text expression, characters like <code>&lt;</code> and <code>&gt;</code> are escaped; however, with HTML expressions, they&#39;re not.</p>\n<p>The expression should be valid standalone HTML — <code>{@html &quot;&lt;div&gt;&quot;}content{@html &quot;&lt;/div&gt;&quot;}</code> will <em>not</em> work, because <code>&lt;/div&gt;</code> is not valid HTML.</p>\n<blockquote>\n<p>Svelte does not sanitize expressions before injecting HTML. If the data comes from an untrusted source, you must sanitize it, or you are exposing your users to an XSS vulnerability.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog-post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n\t<span class="token language-javascript"><span class="token punctuation">{</span>@html post<span class="token punctuation">.</span>content<span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="debug" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#debug" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t{@debug ...}\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>@debug<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>@debug var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> varN<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>{@debug ...}</code> tag offers an alternative to <code>console.log(...)</code>. It logs the values of specific variables whenever they change, and pauses code execution if you have devtools open.</p>\n<p>It accepts a comma-separated list of variable names (not arbitrary expressions).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\tfirstname<span class="token operator">:</span> <span class="token string">\'Ada\'</span><span class="token punctuation">,</span>\n\t\tlastname<span class="token operator">:</span> <span class="token string">\'Lovelace\'</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug user<span class="token punctuation">}</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">{</span>user<span class="token punctuation">.</span>firstname<span class="token punctuation">}</span></span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p><code>{@debug ...}</code> accepts a comma-separated list of variable names (not arbitrary expressions).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- Compiles --></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug user<span class="token punctuation">}</span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">}</span></span>\n\n<span class="token comment">&lt;!-- WON\'T compile --></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug user<span class="token punctuation">.</span>firstname<span class="token punctuation">}</span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug <span class="token operator">!</span>isReady<span class="token punctuation">}</span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span>@debug <span class="token keyword">typeof</span> user <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">}</span></span></code></pre></div></div></div><p>The <code>{@debug}</code> tag without any arguments will insert a <code>debugger</code> statement that gets triggered when <em>any</em> state changes, as opposed to the specified variables.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Element_directives" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Element_directives" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tElement directives\n\t\t\t\t\t</h3><p>As well as attributes, elements can have <em>directives</em>, which control the element&#39;s behaviour in some way.</p>\n\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="on_element_event" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#on_element_event" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\ton:<em>eventname</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>on:eventname=<span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>on:eventname|modifiers=<span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Use the <code>on:</code> directive to listen to DOM events.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tcount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\tcount: <span class="token language-javascript"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Handlers can be declared inline with no performance penalty. As with attributes, directive values may be quoted for the sake of syntax highlighters.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\tcount: <span class="token language-javascript"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Add <em>modifiers</em> to DOM events with the <code>|</code> character.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">on:</span>submit|preventDefault=</span><span class="token language-javascript"><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token comment">&lt;!-- the `submit` event\'s default is prevented,\n\t\t so the page won\'t reload --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></div></div></div><p>The following modifiers are available:</p>\n<ul>\n<li><code>preventDefault</code> — calls <code>event.preventDefault()</code> before running the handler</li>\n<li><code>stopPropagation</code> — calls <code>event.stopPropagation()</code>, preventing the event reaching the next element</li>\n<li><code>passive</code> — improves scrolling performance on touch/wheel events (Svelte will add it automatically where it&#39;s safe to do so)</li>\n<li><code>nonpassive</code> — explicitly set <code>passive: false</code></li>\n<li><code>capture</code> — fires the handler during the <em>capture</em> phase instead of the <em>bubbling</em> phase</li>\n<li><code>once</code> — remove the handler after the first time it runs</li>\n<li><code>self</code> — only trigger handler if event.target is the element itself</li>\n</ul>\n<p>Modifiers can be chained together, e.g. <code>on:click|once|capture={...}</code>.</p>\n<div class="side-by-side"><div class="copy"><p>If the <code>on:</code> directive is used without a value, the component will <em>forward</em> the event, meaning that a consumer of the component can listen for it.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click</span><span class="token punctuation">></span></span>\n\tThe component itself will emit the click event\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>It&#39;s possible to have multiple event listeners for the same event:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tcounter <span class="token operator">=</span> counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">trackEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span>increment<span class="token punctuation">}</span></span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span>track<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="bind_element_property" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#bind_element_property" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tbind:<em>property</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>bind:property=<span class="token language-javascript"><span class="token punctuation">{</span>variable<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Data ordinarily flows down, from parent to child. The <code>bind:</code> directive allows data to flow the other way, from child to parent. Most bindings are specific to particular elements.</p>\n<p>The simplest bindings reflect the value of a property, such as <code>input.value</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>text<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">{</span>yes<span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>If the name matches the value, you can use a shorthand.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- These are equivalent --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Numeric input values are coerced; even though <code>input.value</code> is a string as far as the DOM is concerned, Svelte will treat it as a number. If the input is empty or invalid (in the case of <code>type=&quot;number&quot;</code>), the value is <code>undefined</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>On <code>&lt;input&gt;</code> elements with <code>type=&quot;file&quot;</code>, you can use <code>bind:files</code> to get the <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileList" target="_blank" rel="noopener noreferrer"><code>FileList</code> of selected files</a>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Upload a picture:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>\n\t<span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/png, image/jpeg<span class="token punctuation">"</span></span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>files</span>\n\t<span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span>\n\t<span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span>\n\t<span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span>\n<span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Binding_select_value" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Binding_select_value" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tBinding <code>&lt;select&gt;</code> value\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>A <code>&lt;select&gt;</code> value binding corresponds to the <code>value</code> property on the selected <code>&lt;option&gt;</code>, which can be any value (not just strings, as is normally the case in the DOM).</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>selected<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value=</span><span class="token language-javascript"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value=</span><span class="token language-javascript"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value=</span><span class="token language-javascript"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>A <code>&lt;select multiple&gt;</code> element behaves similarly to a checkbox group.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Rice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Rice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Beans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cheese<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cheese<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Guac (extra)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Guac (extra)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>When the value of an <code>&lt;option&gt;</code> matches its text content, the attribute can be omitted.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Rice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Cheese<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Guac (extra)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Elements with the <code>contenteditable</code> attribute support <code>innerHTML</code> and <code>textContent</code> bindings.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>innerHTML=</span><span class="token language-javascript"><span class="token punctuation">{</span>html<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Media_element_bindings" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Media_element_bindings" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tMedia element bindings\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Media elements (<code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code>) have their own set of bindings — six <em>readonly</em> ones...</p>\n<ul>\n<li><code>duration</code> (readonly) — the total duration of the video, in seconds</li>\n<li><code>buffered</code> (readonly) — an array of <code>{start, end}</code> objects</li>\n<li><code>played</code> (readonly) — ditto</li>\n<li><code>seekable</code> (readonly) — ditto</li>\n<li><code>seeking</code> (readonly) — boolean</li>\n<li><code>ended</code> (readonly) — boolean</li>\n</ul>\n<p>...and five <em>two-way</em> bindings:</p>\n<ul>\n<li><code>currentTime</code> — the current playback time in the video, in seconds</li>\n<li><code>playbackRate</code> — how fast or slow to play the video, where 1 is &#39;normal&#39;</li>\n<li><code>paused</code> — this one should be self-explanatory</li>\n<li><code>volume</code> — a value between 0 and 1</li>\n<li><code>muted</code> — a boolean value where <code>true</code> is muted</li>\n</ul>\n<p>Videos additionally have readonly <code>videoWidth</code> and <code>videoHeight</code> bindings.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span>\n\t<span class="token attr-name">src=</span><span class="token language-javascript"><span class="token punctuation">{</span>clip<span class="token punctuation">}</span></span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>duration</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>buffered</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>played</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>seekable</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>seeking</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>ended</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>currentTime</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>playbackRate</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>paused</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>volume</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>muted</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>videoWidth</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>videoHeight</span>\n<span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Block-level_element_bindings" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Block-level_element_bindings" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tBlock-level element bindings\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Block-level elements have 4 readonly bindings, measured using a technique similar to <a href="http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/" target="_blank" rel="noopener noreferrer">this one</a>:</p>\n<ul>\n<li><code>clientWidth</code></li>\n<li><code>clientHeight</code></li>\n<li><code>offsetWidth</code></li>\n<li><code>offsetHeight</code></li>\n</ul>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>offsetWidth=</span><span class="token language-javascript"><span class="token punctuation">{</span>width<span class="token punctuation">}</span></span>\n\t<span class="token attr-name"><span class="token namespace">bind:</span>offsetHeight=</span><span class="token language-javascript"><span class="token punctuation">{</span>height<span class="token punctuation">}</span></span>\n<span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Chart</span> <span class="token language-javascript"><span class="token punctuation">{</span>width<span class="token punctuation">}</span></span> <span class="token language-javascript"><span class="token punctuation">{</span>height<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="bind_group" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#bind_group" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tbind:group\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>bind:group=<span class="token language-javascript"><span class="token punctuation">{</span>variable<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Inputs that work together can use <code>bind:group</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">let</span> tortilla <span class="token operator">=</span> <span class="token string">\'Plain\'</span><span class="token punctuation">;</span>\n\t<span class="token keyword">let</span> fillings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- grouped radio inputs are mutually exclusive --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>tortilla<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Plain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>tortilla<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Whole wheat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>tortilla<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Spinach<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- grouped checkbox inputs populate an array --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Rice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Beans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cheese<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">{</span>fillings<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Guac (extra)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="bind_element" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#bind_element" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tbind:this\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>bind:this=<span class="token language-javascript"><span class="token punctuation">{</span>dom_node<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>To get a reference to a DOM node, use <code>bind:this</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> onMount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">let</span> canvasElement<span class="token punctuation">;</span>\n\n\t<span class="token function">onMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> ctx <span class="token operator">=</span> canvasElement<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">drawStuff</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">{</span>canvasElement<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="class_name" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#class_name" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tclass:<em>name</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>class:name=<span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>class:name</code></pre></div><div class="side-by-side"><div class="copy"><p>A <code>class:</code> directive provides a shorter way of toggling a class on an element.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- These are equivalent --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class="</span><span class="token language-javascript"><span class="token punctuation">{</span>active <span class="token operator">?</span> <span class="token string">\'active\'</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">class:</span>active=</span><span class="token language-javascript"><span class="token punctuation">{</span>active<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Shorthand, for when name and value match --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">class:</span>active</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Multiple class toggles can be included --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">class:</span>active</span> <span class="token attr-name"><span class="token namespace">class:</span>inactive=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">!</span>active<span class="token punctuation">}</span></span> <span class="token attr-name"><span class="token namespace">class:</span>isAdmin</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="use_action" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#use_action" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tuse:<em>action</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>use:action</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>use:action=<span class="token language-javascript"><span class="token punctuation">{</span>parameters<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function-variable function">action</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> parameters<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tupdate<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">parameters<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n\tdestroy<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span></code></pre></div><div class="side-by-side"><div class="copy"><p>Actions are functions that are called when an element is created. They can return an object with a <code>destroy</code> method that is called after the element is unmounted:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// the node has been mounted in the DOM</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">// the node has been removed from the DOM</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>foo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>An action can have a parameter. If the returned value has an <code>update</code> method, it will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup.</p>\n<blockquote>\n<p>Don&#39;t worry about the fact that we&#39;re redeclaring the <code>foo</code> function for every component instance — Svelte will hoist any functions that don&#39;t depend on local state out of the component definition.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> bar<span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> bar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// the node has been mounted in the DOM</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">// the value of `bar` has changed</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\t\t\t<span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">// the node has been removed from the DOM</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>foo=</span><span class="token language-javascript"><span class="token punctuation">{</span>bar<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="transition_fn" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#transition_fn" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\ttransition:<em>fn</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:fn</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:fn=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:fn|local</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>transition:fn|local=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function-variable function">transition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> params<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tdelay<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n\tduration<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n\teasing<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> number<span class="token punctuation">,</span>\n\tcss<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number<span class="token punctuation">,</span> u<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> string<span class="token punctuation">,</span>\n\ttick<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number<span class="token punctuation">,</span> u<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span></code></pre></div><div class="side-by-side"><div class="copy"><p>A transition is triggered by an element entering or leaving the DOM as a result of a state change.</p>\n<p>When a block is transitioning out, all elements inside the block, including those that do not have their own transitions, are kept in the DOM until every transition in the block has completed.</p>\n<p>The <code>transition:</code> directive indicates a <em>bidirectional</em> transition, which means it can be smoothly reversed while the transition is in progress.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span>\n\t\tfades in and out\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div><blockquote>\n<p>By default intro transitions will not play on first render. You can modify this behaviour by setting <code>intro: true</code> when you <a href="docs#Client-side_component_API" rel="noopener noreferrer">create a component</a>.</p>\n</blockquote>\n\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Transition_parameters" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Transition_parameters" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tTransition parameters\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Like actions, transitions can have parameters.</p>\n<p>(The double <code>{{curlies}}</code> aren&#39;t a special syntax; this is an object literal inside an expression tag.)</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> duration<span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\t\tflies in, fades out over two seconds\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Custom_transition_functions" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Custom_transition_functions" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tCustom transition functions\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Transitions can use custom functions. If the returned object has a <code>css</code> function, Svelte will create a CSS animation that plays on the element.</p>\n<p>The <code>t</code> argument passed to <code>css</code> is a value between <code>0</code> and <code>1</code> after the <code>easing</code> function has been applied. <em>In</em> transitions run from <code>0</code> to <code>1</code>, <em>out</em> transitions run from <code>1</code> to <code>0</code> — in other words <code>1</code> is the element&#39;s natural state, as though no transition had been applied. The <code>u</code> argument is equal to <code>1 - t</code>.</p>\n<p>The function is called repeatedly <em>before</em> the transition begins, with different <code>t</code> and <code>u</code> arguments.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> elasticOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> visible<span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">whoosh</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> existingTransform <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">\'none\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\tdelay<span class="token operator">:</span> params<span class="token punctuation">.</span>delay <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span>\n\t\t\tduration<span class="token operator">:</span> params<span class="token punctuation">.</span>duration <span class="token operator">||</span> <span class="token number">400</span><span class="token punctuation">,</span>\n\t\t\teasing<span class="token operator">:</span> params<span class="token punctuation">.</span>easing <span class="token operator">||</span> elasticOut<span class="token punctuation">,</span>\n\t\t\t<span class="token function-variable function">css</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> u</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>existingTransform<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">in:</span>whoosh</span><span class="token punctuation">></span></span>\n\t\twhooshes in\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>A custom transition function can also return a <code>tick</code> function, which is called <em>during</em> the transition with the same <code>t</code> and <code>u</code> arguments.</p>\n<blockquote>\n<p>If it&#39;s possible to use <code>css</code> instead of <code>tick</code>, do so — CSS animations can run off the main thread, preventing jank on slower devices.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">typewriter</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> <span class="token punctuation">{</span> speed <span class="token operator">=</span> <span class="token number">50</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> valid <span class="token operator">=</span> <span class="token punctuation">(</span>\n\t\t\tnode<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>\n\t\t\tnode<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType <span class="token operator">===</span> Node<span class="token punctuation">.</span><span class="token constant">TEXT_NODE</span>\n\t\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">const</span> text <span class="token operator">=</span> node<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> duration <span class="token operator">=</span> text<span class="token punctuation">.</span>length <span class="token operator">*</span> speed<span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\tduration<span class="token punctuation">,</span>\n\t\t\t<span class="token function-variable function">tick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> u</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\tnode<span class="token punctuation">.</span>textContent <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">in:</span>typewriter="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> speed<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span>\n\t\tThe quick brown fox jumps over the lazy dog\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div><p>If a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making <a href="tutorial/deferred-transitions" rel="noopener noreferrer">crossfade effects</a> possible.</p>\n\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Transition_events" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Transition_events" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tTransition events\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>An element with transitions will dispatch the following events in addition to any standard DOM events:</p>\n<ul>\n<li><code>introstart</code></li>\n<li><code>introend</code></li>\n<li><code>outrostart</code></li>\n<li><code>outroend</code></li>\n</ul>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span>\n\t\t<span class="token attr-name"><span class="token namespace">transition:</span>fly="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> y<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t\t<span class="token attr-name"><span class="token namespace">on:</span>introstart="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> status <span class="token operator">=</span> <span class="token string">\'intro started\'</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t\t<span class="token attr-name"><span class="token namespace">on:</span>outrostart="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> status <span class="token operator">=</span> <span class="token string">\'outro started\'</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t\t<span class="token attr-name"><span class="token namespace">on:</span>introend="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> status <span class="token operator">=</span> <span class="token string">\'intro ended\'</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t\t<span class="token attr-name"><span class="token namespace">on:</span>outroend="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> status <span class="token operator">=</span> <span class="token string">\'outro ended\'</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span>\n\t<span class="token punctuation">></span></span>\n\t\tFlies in and out\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Local transitions only play when the block they belong to is created or destroyed, <em>not</em> when parent blocks are created or destroyed.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> x<span class="token punctuation">}</span></span>\n\t<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> y<span class="token punctuation">}</span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span>\n\t\t\tfades in and out when x or y change\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade|local</span><span class="token punctuation">></span></span>\n\t\t\tfades in and out only when y changes\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n\t<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="in_fn_out_fn" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#in_fn_out_fn" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tin:<em>fn</em>/out:<em>fn</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:fn</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:fn=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:fn|local</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>in:fn|local=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:fn</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:fn=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:fn|local</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>out:fn|local=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Similar to <code>transition:</code>, but only applies to elements entering (<code>in:</code>) or leaving (<code>out:</code>) the DOM.</p>\n<p>Unlike with <code>transition:</code>, transitions applied with <code>in:</code> and <code>out:</code> are not bidirectional — an in transition will continue to &#39;play&#39; alongside the out transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> visible<span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">in:</span>fly</span> <span class="token attr-name"><span class="token namespace">out:</span>fade</span><span class="token punctuation">></span></span>\n\t\tflies in, fades out\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="animate_fn" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#animate_fn" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tanimate:<em>fn</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>animate:name</code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code>animate:name=<span class="token language-javascript"><span class="token punctuation">{</span>params<span class="token punctuation">}</span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code><span class="token function-variable function">animation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token operator">:</span> DOMRect<span class="token punctuation">,</span> to<span class="token operator">:</span> DOMRect <span class="token punctuation">}</span> <span class="token punctuation">,</span> params<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\tdelay<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n\tduration<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n\teasing<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> number<span class="token punctuation">,</span>\n\tcss<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number<span class="token punctuation">,</span> u<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> string<span class="token punctuation">,</span>\n\ttick<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token operator">:</span> number<span class="token punctuation">,</span> u<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span></code></pre></div><div class=\'code-block\'><pre class=\'language-javascript\'><code>DOMRect <span class="token punctuation">{</span>\n\tbottom<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\theight<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\t​​left<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\tright<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\t​top<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\twidth<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\tx<span class="token operator">:</span> number<span class="token punctuation">,</span>\n\ty<span class="token operator">:</span> number\n<span class="token punctuation">}</span></code></pre></div><div class="side-by-side"><div class="copy"><p>An animation is triggered when the contents of a <a href="docs#each" rel="noopener noreferrer">keyed each block</a> are re-ordered. Animations do not run when an element is removed, only when the each block&#39;s data is reordered. Animate directives must be on an element that is an <em>immediate</em> child of a keyed each block.</p>\n<p>Animations can be used with Svelte&#39;s <a href="docs#svelte_animate" rel="noopener noreferrer">built-in animation functions</a> or <a href="docs#Custom_animation_functions" rel="noopener noreferrer">custom animation functions</a>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- When `list` is reordered the animation will run--></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">list </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> index </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">animate:</span>flip</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Animation_Parameters" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Animation_Parameters" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tAnimation Parameters\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>As with actions and transitions, animations can have parameters.</p>\n<p>(The double <code>{{curlies}}</code> aren&#39;t a special syntax; this is an object literal inside an expression tag.)</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">list </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> index </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">animate:</span>flip="</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> delay<span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h5>\n\t\t\t\t\t\t<span id="Custom_animation_functions" class="offset-anchor" data-scrollignore></span>\n\t\t\t\t\t\t<a href="docs#Custom_animation_functions" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tCustom animation functions\n\t\t\t\t\t</h5><div class="side-by-side"><div class="copy"><p>Animations can use custom functions that provide the <code>node</code>, an <code>animation</code> object and any <code>paramaters</code> as arguments. The <code>animation</code> parameter is an object containing <code>from</code> and <code>to</code> properties each containing a <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMRect#Properties" target="_blank" rel="noopener noreferrer">DOMRect</a> describing the geometry of the element in its <code>start</code> and <code>end</code> positions. The <code>from</code> property is the DOMRect of the element in its starting position, the <code>to</code> property is the DOMRect of the element in its final position after the list has been reordered and the DOM updated.</p>\n<p>If the returned object has a <code>css</code> method, Svelte will create a CSS animation that plays on the element.</p>\n<p>The <code>t</code> argument passed to <code>css</code> is a value that goes from <code>0</code> and <code>1</code> after the <code>easing</code> function has been applied. The <code>u</code> argument is equal to <code>1 - t</code>.</p>\n<p>The function is called repeatedly <em>before</em> the animation begins, with different <code>t</code> and <code>u</code> arguments.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> cubicOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">whizz</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">,</span> to <span class="token punctuation">}</span><span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\t\t<span class="token keyword">const</span> dx <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>left <span class="token operator">-</span> to<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> dy <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>top <span class="token operator">-</span> to<span class="token punctuation">.</span>top<span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">const</span> d <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\tdelay<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n\t\t\tduration<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">120</span><span class="token punctuation">,</span>\n\t\t\teasing<span class="token operator">:</span> cubicOut<span class="token punctuation">,</span>\n\t\t\t<span class="token function-variable function">css</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> u</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n\t\t\t\t<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">transform: translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>u <span class="token operator">*</span> dx<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>u <span class="token operator">*</span> dy<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px) rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t<span class="token operator">*</span><span class="token number">360</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg);</span><span class="token template-punctuation string">`</span></span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">list </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> index </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">animate:</span>whizz</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>A custom animation function can also return a <code>tick</code> function, which is called <em>during</em> the animation with the same <code>t</code> and <code>u</code> arguments.</p>\n<blockquote>\n<p>If it&#39;s possible to use <code>css</code> instead of <code>tick</code>, do so — CSS animations can run off the main thread, preventing jank on slower devices.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">import</span> <span class="token punctuation">{</span> cubicOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'svelte/easing\'</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">function</span> <span class="token function">whizz</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">,</span> to <span class="token punctuation">}</span><span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\t\t<span class="token keyword">const</span> dx <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>left <span class="token operator">-</span> to<span class="token punctuation">.</span>left<span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> dy <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>top <span class="token operator">-</span> to<span class="token punctuation">.</span>top<span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">const</span> d <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\tdelay<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n\t\tduration<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">120</span><span class="token punctuation">,</span>\n\t\teasing<span class="token operator">:</span> cubicOut<span class="token punctuation">,</span>\n\t\t<span class="token function-variable function">tick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> u</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n\t\t\tObject<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>style<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\t\t\tcolor<span class="token operator">:</span> t <span class="token operator">></span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">\'Pink\'</span> <span class="token operator">:</span> <span class="token string">\'Blue\'</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">list </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">,</span> index </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">animate:</span>whizz</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="Component_directives" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#Component_directives" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tComponent directives\n\t\t\t\t\t</h3>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="on_component_event" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#on_component_event" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\ton:<em>eventname</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>on:eventname=<span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Components can emit events using <a href="docs#createEventDispatcher" rel="noopener noreferrer">createEventDispatcher</a>, or by forwarding DOM events. Listening for component events looks the same as listening for DOM events:</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SomeComponent</span> <span class="token attr-name"><span class="token namespace">on:</span>whatever=</span><span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>As with DOM events, if the <code>on:</code> directive is used without a value, the component will <em>forward</em> the event, meaning that a consumer of the component can listen for it.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SomeComponent</span> <span class="token attr-name"><span class="token namespace">on:</span>whatever</span><span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="bind_component_property" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#bind_component_property" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tbind:<em>property</em>\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>bind:property=<span class="token language-javascript"><span class="token punctuation">{</span>variable<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>You can bind to component props using the same syntax as for elements.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Keypad</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">{</span>pin<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="bind_component" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#bind_component" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\tbind:this\n\t\t\t\t\t</h4><div class=\'code-block\'><pre class=\'language-svelte\'><code>bind:this=<span class="token language-javascript"><span class="token punctuation">{</span>component_instance<span class="token punctuation">}</span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Components also support <code>bind:this</code>, allowing you to interact with component instances programmatically.</p>\n<blockquote>\n<p>Note that we can&#39;t do <code>{cart.empty}</code> since <code>cart</code> is <code>undefined</code> when the button is first rendered and throws an error.</p>\n</blockquote>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ShoppingCart</span> <span class="token attr-name"><span class="token namespace">bind:</span>this=</span><span class="token language-javascript"><span class="token punctuation">{</span>cart<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> cart<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\tEmpty shopping cart\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="slot" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#slot" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;slot&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- optional fallback --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- optional fallback --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">prop=</span><span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>Components can have child content, in the same way that elements can.</p>\n<p>The content is exposed in the child component using the <code>&lt;slot&gt;</code> element, which can contain fallback content that is rendered if no children are provided.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- App.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Widget</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>this is some child content that will overwrite the default slot content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Widget</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Widget.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>\n\t\tthis fallback content will be rendered when no content is provided, like in the first example\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="slot_name" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#slot_name" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;slot name=&quot;</code><em>name</em><code>&quot;&gt;</code>\n\t\t\t\t\t</h4><div class="side-by-side"><div class="copy"><p>Named slots allow consumers to target specific areas. They can also have fallback content.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- App.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Widget</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Copyright (c) 2019 Svelte Industries<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Widget</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Widget.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>No header was provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Some content between header and footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\t<span id="slot_let" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#slot_let" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;slot let:</code><em>name</em><code>={</code><em>value</em><code>}&gt;</code>\n\t\t\t\t\t</h4><div class="side-by-side"><div class="copy"><p>Slots can be rendered zero or more times, and can pass values <em>back</em> to the parent using props. The parent exposes the values to the slot template using the <code>let:</code> directive.</p>\n<p>The usual shorthand rules apply — <code>let:item</code> is equivalent to <code>let:item={item}</code>, and <code>&lt;slot {item}&gt;</code> is equivalent to <code>&lt;slot item={item}&gt;</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- App.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyList</span> <span class="token language-javascript"><span class="token punctuation">{</span>items<span class="token punctuation">}</span></span> <span class="token attr-name"><span class="token namespace">let:</span>prop=</span><span class="token language-javascript"><span class="token punctuation">{</span>thing<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>thing<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FancyList</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- FancyList.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">}</span></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fancy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\t\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">prop=</span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>Named slots can also expose values. The <code>let:</code> directive goes on the element with the <code>slot</code> attribute.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token comment">&lt;!-- App.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyList</span> <span class="token language-javascript"><span class="token punctuation">{</span>items<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">let:</span>item</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Copyright (c) 2019 Svelte Industries<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FancyList</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- FancyList.svelte --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">#each</span> <span class="token language-javascript">items </span><span class="token keyword">as</span> <span class="token language-javascript">item<span class="token punctuation">}</span></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fancy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\t\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token language-javascript"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n\t<span class="token each"><span class="token punctuation">{</span><span class="token keyword">/each</span><span class="token punctuation">}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_self" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_self" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:self&gt;</code>\n\t\t\t\t\t</h3><div class="side-by-side"><div class="copy"><p>The <code>&lt;svelte:self&gt;</code> element allows a component to include itself, recursively.</p>\n<p>It cannot appear at the top level of your markup; it must be inside an if or each block to prevent an infinite loop.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">export</span> <span class="token keyword">let</span> count<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>#<span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>counting down... <span class="token language-javascript"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>self</span> <span class="token attr-name">count="</span><span class="token language-javascript"><span class="token punctuation">{</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token attr-name">"</span><span class="token punctuation">/></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">}</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>lift-off!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_component" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_component" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:component&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>component</span> <span class="token attr-name">this=</span><span class="token language-javascript"><span class="token punctuation">{</span>expression<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>&lt;svelte:component&gt;</code> element renders a component dynamically, using the component constructor specified as the <code>this</code> property. When the property changes, the component is destroyed and recreated.</p>\n<p>If <code>this</code> is falsy, no component is rendered.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>component</span> <span class="token attr-name">this=</span><span class="token language-javascript"><span class="token punctuation">{</span>currentSelection<span class="token punctuation">.</span>component<span class="token punctuation">}</span></span> <span class="token attr-name">foo=</span><span class="token language-javascript"><span class="token punctuation">{</span>bar<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_window" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_window" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:window&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>window</span> <span class="token attr-name"><span class="token namespace">on:</span>event=</span><span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>window</span> <span class="token attr-name"><span class="token namespace">bind:</span>prop=</span><span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>&lt;svelte:window&gt;</code> element allows you to add event listeners to the <code>window</code> object without worrying about removing them when the component is destroyed, or checking for the existence of <code>window</code> when server-side rendering.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">function</span> <span class="token function">handleKeydown</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pressed the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> key</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>window</span> <span class="token attr-name"><span class="token namespace">on:</span>keydown=</span><span class="token language-javascript"><span class="token punctuation">{</span>handleKeydown<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div><div class="side-by-side"><div class="copy"><p>You can also bind to the following properties:</p>\n<ul>\n<li><code>innerWidth</code></li>\n<li><code>innerHeight</code></li>\n<li><code>outerWidth</code></li>\n<li><code>outerHeight</code></li>\n<li><code>scrollX</code></li>\n<li><code>scrollY</code></li>\n<li><code>online</code> — an alias for window.navigator.onLine</li>\n</ul>\n<p>All except <code>scrollX</code> and <code>scrollY</code> are readonly.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>window</span> <span class="token attr-name"><span class="token namespace">bind:</span>scrollY=</span><span class="token language-javascript"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_body" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_body" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:body&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>body</span> <span class="token attr-name"><span class="token namespace">on:</span>event=</span><span class="token language-javascript"><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>As with <code>&lt;svelte:window&gt;</code>, this element allows you to add listeners to events on <code>document.body</code>, such as <code>mouseenter</code> and <code>mouseleave</code> which don&#39;t fire on <code>window</code>.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>body</span>\n\t<span class="token attr-name"><span class="token namespace">on:</span>mouseenter=</span><span class="token language-javascript"><span class="token punctuation">{</span>handleMouseenter<span class="token punctuation">}</span></span>\n\t<span class="token attr-name"><span class="token namespace">on:</span>mouseleave=</span><span class="token language-javascript"><span class="token punctuation">{</span>handleMouseleave<span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_head" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_head" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:head&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>This element makes it possible to insert elements into <code>document.head</code>. During server-side rendering, <code>head</code> content is exposed separately to the main <code>html</code> content.</p>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tutorial/dark-theme.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">svelte:</span>head</span><span class="token punctuation">></span></span></code></pre></div></div></div>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id="svelte_options" class="offset-anchor" ></span>\n\t\t\t\t\t\t<a href="docs#svelte_options" class="anchor" aria-hidden="true"></a>\n\t\t\t\t\t\t<code>&lt;svelte:options&gt;</code>\n\t\t\t\t\t</h3><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>options</span> <span class="token attr-name">option=</span><span class="token language-javascript"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre></div><div class="side-by-side"><div class="copy"><p>The <code>&lt;svelte:options&gt;</code> element provides a place to specify per-component compiler options, which are detailed in the <a href="docs#svelte_compile" rel="noopener noreferrer">compiler section</a>. The possible options are:</p>\n<ul>\n<li><code>immutable={true}</code> — you never use mutable data, so the compiler can do simple referential equality checks to determine if values have changed</li>\n<li><code>immutable={false}</code> — the default. Svelte will be more conservative about whether or not mutable objects have changed</li>\n<li><code>accessors={true}</code> — adds getters and setters for the component&#39;s props</li>\n<li><code>accessors={false}</code> — the default</li>\n<li><code>namespace=&quot;...&quot;</code> — the namespace where this component will be used, most commonly &quot;svg&quot;</li>\n<li><code>tag=&quot;...&quot;</code> — the name to use when compiling this component as a custom element</li>\n</ul>\n</div><div class="code"><div class=\'code-block\'><pre class=\'language-svelte\'><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">svelte:</span>options</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-custom-element<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></div></div></div>',
	title: "Template syntax",
	slug: "Template_syntax",
	file: "./api-docs.md",
	sections: [
		{ slug: "Tags", title: "Tags", sections: [] },
		{
			slug: "Attributes_and_props",
			title: "Attributes and props",
			sections: [],
		},
		{ slug: "Text_expressions", title: "Text expressions", sections: [] },
		{ slug: "Comments", title: "Comments", sections: [] },
		{ slug: "if", title: "{#if ...}", sections: [] },
		{ slug: "each", title: "{#each ...}", sections: [] },
		{ slug: "await", title: "{#await ...}", sections: [] },
		{ slug: "key", title: "{#key ...}", sections: [] },
		{ slug: "html", title: "{@html ...}", sections: [] },
		{ slug: "debug", title: "{@debug ...}", sections: [] },
		{
			slug: "Element_directives",
			title: "Element directives",
			sections: [
				{
					slug: "on_element_event",
					title: "on:<em>eventname</em>",
					sections: [],
				},
				{
					slug: "bind_element_property",
					title: "bind:<em>property</em>",
					sections: [],
				},
				{ slug: "bind_group", title: "bind:group", sections: [] },
				{ slug: "bind_element", title: "bind:this", sections: [] },
				{ slug: "class_name", title: "class:<em>name</em>", sections: [] },
				{ slug: "use_action", title: "use:<em>action</em>", sections: [] },
				{
					slug: "transition_fn",
					title: "transition:<em>fn</em>",
					sections: [],
				},
				{
					slug: "in_fn_out_fn",
					title: "in:<em>fn</em>/out:<em>fn</em>",
					sections: [],
				},
				{ slug: "animate_fn", title: "animate:<em>fn</em>", sections: [] },
			],
		},
		{
			slug: "Component_directives",
			title: "Component directives",
			sections: [
				{
					slug: "on_component_event",
					title: "on:<em>eventname</em>",
					sections: [],
				},
				{
					slug: "bind_component_property",
					title: "bind:<em>property</em>",
					sections: [],
				},
				{ slug: "bind_component", title: "bind:this", sections: [] },
			],
		},
		{
			slug: "slot",
			title: "&lt;slot&gt;",
			sections: [
				{
					slug: "slot_name",
					title: "&lt;slot name=&quot;<em>name</em>&quot;&gt;",
					sections: [],
				},
				{
					slug: "slot_let",
					title: "&lt;slot let:<em>name</em>={<em>value</em>}&gt;",
					sections: [],
				},
			],
		},
		{ slug: "svelte_self", title: "&lt;svelte:self&gt;", sections: [] },
		{
			slug: "svelte_component",
			title: "&lt;svelte:component&gt;",
			sections: [],
		},
		{ slug: "svelte_window", title: "&lt;svelte:window&gt;", sections: [] },
		{ slug: "svelte_body", title: "&lt;svelte:body&gt;", sections: [] },
		{ slug: "svelte_head", title: "&lt;svelte:head&gt;", sections: [] },
		{ slug: "svelte_options", title: "&lt;svelte:options&gt;", sections: [] },
	],
};
